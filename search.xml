<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[mac下解压rar文件]]></title>
      <url>/mac%E8%A7%A3%E5%8E%8Brar%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>mac的Dr. Cleaner不能够解压rar文件，使用终端的unrar来解决</p>
<a id="more"></a>
<h3 id="使用Homebrew安装unrar"><a href="#使用Homebrew安装unrar" class="headerlink" title="使用Homebrew安装unrar"></a>使用Homebrew安装unrar</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">brew install unrar</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="comment">### cd到目标文件目录，运行下面的命令</span></span><br><span class="line"></span><br><span class="line">``` bash</span><br><span class="line">unrar x project</span><br></pre></td></tr></table></figure>
<p><img src="http://ongsui5u0.bkt.clouddn.com/WechatIMG272.jpeg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 自用笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用jieba中文分词]]></title>
      <url>/jieba/</url>
      <content type="html"><![CDATA[<p>使用jieba分词，实现项目的搜索功能！<br><a id="more"></a></p>
<h2 id="jieba"><a href="#jieba" class="headerlink" title="jieba"></a>jieba</h2><h3 id="支持三种分词模式"><a href="#支持三种分词模式" class="headerlink" title="支持三种分词模式"></a>支持三种分词模式</h3><ul>
<li>精确模式，试图将句子最精确地切开，适合文本分析；  </li>
<li>精确模式，试图将句子最精确地切开，适合文本分析；</li>
<li>搜索引擎模式，在精确模式的基础上，对长词再次切分，提高召回率，适合用于搜索引擎分词。</li>
<li>支持繁体分词 、支持繁体分词 、MIT 授权协议</li>
</ul>
<h3 id="MIT-授权协议"><a href="#MIT-授权协议" class="headerlink" title="MIT 授权协议"></a>MIT 授权协议</h3><ul>
<li>python2/3 都兼容  </li>
<li><a href="https://github.com/fxsjy/jieba" target="_blank" rel="noopener">github</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install jieba</span><br><span class="line">pip3 install jieba</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 自用笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python爬虫的基础知识]]></title>
      <url>/Python_spider/</url>
      <content type="html"><![CDATA[<p>爬虫也写了一些，记录一下自己写爬虫所用到的知识吧，记录一下，方便以后的使用！<br><a id="more"></a></p>
<h2 id="Python爬虫小知识"><a href="#Python爬虫小知识" class="headerlink" title="Python爬虫小知识"></a>Python爬虫小知识</h2><h3 id="简单的直接获取"><a href="#简单的直接获取" class="headerlink" title="简单的直接获取"></a>简单的直接获取</h3><h3 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">url = <span class="string">'http://lfivesix.com/'</span></span><br><span class="line">data = requests.get(url)</span><br></pre></td></tr></table></figure>
<p>这样我们就完成了一个简单的http请求  </p>
<h3 id="Post方法"><a href="#Post方法" class="headerlink" title="Post方法"></a>Post方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import urllib</span><br><span class="line">import urllib2</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://abcde.com"</span></span><br><span class="line">form = &#123;<span class="string">'name'</span>:<span class="string">'abc'</span>,<span class="string">'password'</span>:<span class="string">'1234'</span>&#125;</span><br><span class="line">form_data = urllib.urlencode(form)</span><br><span class="line">request = urllib2.Request(url,form_data)</span><br><span class="line">response = urllib2.urlopen(request)</span><br><span class="line"><span class="built_in">print</span> response.read()</span><br></pre></td></tr></table></figure>
<h3 id="requests与BeautifulSoup结合的使用"><a href="#requests与BeautifulSoup结合的使用" class="headerlink" title="requests与BeautifulSoup结合的使用"></a>requests与BeautifulSoup结合的使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">__author__ = <span class="string">'HuaHua'</span></span><br><span class="line">import requests  <span class="comment"># 导入requests</span></span><br><span class="line">from bs4 import BeautifulSoup  <span class="comment"># 从bs4导入BeautifulSoup</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://lfivesix.com/'</span>  <span class="comment"># 目标网站url</span></span><br><span class="line">we_data = requests.get(url).text  <span class="comment"># 获取text文本</span></span><br><span class="line">soup = BeautifulSoup(we_data, <span class="string">'lxml'</span>)  <span class="comment"># 对文本进行解析</span></span><br><span class="line"><span class="comment"># 从解析文件中通过select选择器定位指定的元素，返回一个列表</span></span><br><span class="line">info = soup.select(<span class="string">"div.article-header &gt; h1 &gt; a.article-title"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对返回的列表进行遍历</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> info:</span><br><span class="line">    title = n.get_text()</span><br><span class="line">    href = n.get(<span class="string">'href'</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>使用requests.get()对目标url发起GET请求，并使用text方法获取文本内容  </li>
<li>使用select选择器，选择解析后的文本中的指定元素，有find()和findall()方法。返回的是一个列表  </li>
<li>get(‘href’)获取属性为“href”的属性值，get_text()表示获取标签的文本信息。</li>
</ul>
<h3 id="使用requests与xpath"><a href="#使用requests与xpath" class="headerlink" title="使用requests与xpath"></a>使用requests与xpath</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">__author__ = <span class="string">'HuaHua'</span></span><br><span class="line">import requests</span><br><span class="line">from lxml import etree</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://lfivesix.com/'</span>  <span class="comment"># 目标网站url</span></span><br><span class="line">we_data = requests.get(url).text  <span class="comment"># 获取text文本</span></span><br><span class="line">selector = etree.HTML(we_data)  <span class="comment"># 解析</span></span><br><span class="line"><span class="comment"># 获取我们想要的文本内容</span></span><br><span class="line">title = selector.xpath(<span class="string">'//*[@id="post-visit"]/div[2]/header/h1/a/text()'</span>)[0]</span><br></pre></td></tr></table></figure>
<ul>
<li>title 返回的是一个列表，用text()获取我们想要的文本内容。</li>
</ul>
<h3 id="使用代理IP"><a href="#使用代理IP" class="headerlink" title="使用代理IP"></a>使用代理IP</h3><p>爬虫的时候经常遇到了ip被封，我们换一个ip就好了，所以我就搞了一个ip池，当然这些都是从免费网站搞来的，可用性不太高，毕竟不花钱。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">待更新</span><br></pre></td></tr></table></figure>
<h3 id="多进程爬取"><a href="#多进程爬取" class="headerlink" title="多进程爬取"></a>多进程爬取</h3><p>我的理解，单进程：一个工作由一个人做。多进程：一个工作由多个人一起做！<br>举一个多进程的例子。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Pool</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def mul_get_verify_ip(ips_list):</span><br><span class="line">    <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">    多进程验证ip有效性</span></span><br><span class="line"><span class="string">    "</span><span class="string">""</span></span><br><span class="line">    pool = Pool(processes=2)  <span class="comment"># 实例化一个进程池，设置进程数为2</span></span><br><span class="line">    <span class="comment"># 调用进程池的map()方法，接受一个函数(爬虫函数)和一个列表(url列表)</span></span><br><span class="line">    fl_proxies = pool.map(get_verify_ip, ips_list)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()  <span class="comment"># 等待进程池中的worker进程执行完毕</span></span><br><span class="line">    <span class="built_in">return</span> fl_proxies</span><br></pre></td></tr></table></figure>
<p>get_verify_ip是一个函数，验证ip有效性的一个函数，ips_list是一个列表，存放ip的列表。</p>
<h3 id="使用cookies-模拟登陆"><a href="#使用cookies-模拟登陆" class="headerlink" title="使用cookies 模拟登陆"></a>使用cookies 模拟登陆</h3><ul>
<li>手动导入</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">cookie = &#123;<span class="string">"*********"</span>&#125;</span><br><span class="line">url = <span class="string">'http://lfivesix.com/'</span></span><br><span class="line">wbdata = requests.get(url, cookies=cookie).text</span><br></pre></td></tr></table></figure>
<h3 id="伪装成浏览器"><a href="#伪装成浏览器" class="headerlink" title="伪装成浏览器"></a>伪装成浏览器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">'User-Agent'</span>:<span class="string">'*******'</span>&#125;</span><br><span class="line">url = <span class="string">'http://lfivesix.com/'</span></span><br><span class="line">wbdata = requests.get(url, headers = headers).text</span><br></pre></td></tr></table></figure>
<h3 id="使用Selenium-PhantomJS"><a href="#使用Selenium-PhantomJS" class="headerlink" title="使用Selenium+PhantomJS"></a>使用Selenium+PhantomJS</h3><p>在我们爬取信息的时候会发现，你可以在页面上看见你想要的东西，但是你用普通的方法抓下的并没有我们想要的信息。<br>Selenium是一个用于Web应用的功能自动化测试工具，Selenium 直接运行在浏览器中，就像真正的用户在操作一样。<br>Phantomjs是一个“无头”浏览器，也就是没有界面的浏览器，但是功能与普通的浏览器无异.  </p>
<ul>
<li>我们拿腾讯新闻的滚动新闻来举例子<br>当我们查看网页源代码的时候，我们并没有看任何一条新闻。js动态加载，我们有两种办法：  </li>
</ul>
<ol>
<li>手动的去找js的接口，打开控制台，查看network下的js，可以找到我们所需要的数据<br><img src="http://ongsui5u0.bkt.clouddn.com/WechatIMG262.jpeg" alt="">  </li>
<li>使用Selenium+PhantomJS</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from lxml import etree</span><br><span class="line">from selenium import webdriver</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://news.qq.com/articleList/rolls/'</span>  <span class="comment"># 目标网站url</span></span><br><span class="line">driver = webdriver.PhantomJS()</span><br><span class="line">driver.get(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取我们想要的文本内容</span></span><br><span class="line">info = etree.HTML(driver.page_source).xpath(<span class="string">'//*[@id="listInfo"]/ul/li[1]/a/span[1]/text()'</span>)[0]</span><br><span class="line"><span class="built_in">print</span>(info)</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 自用笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网站压力测试工具Webbench]]></title>
      <url>/Webbench/</url>
      <content type="html"><![CDATA[<p>Webbench非常简单的网站压力测试工具。它使用fork()模拟多个客户端同时访问我们设定的url，webbench的标准测试可以向我们展示服务器的两项内容：每秒钟相应请求数和每秒钟传输数据量。Webbench最多可以模拟3万个并发连接去测试网站的负载能力。(据说是这样的)<br><a id="more"></a></p>
<h2 id="Webbench"><a href="#Webbench" class="headerlink" title="Webbench"></a>Webbench</h2><h3 id="安装Webbench"><a href="#安装Webbench" class="headerlink" title="安装Webbench"></a>安装Webbench</h3><ul>
<li><a href="home.tiscali.cz/~cz210552/webbench_cz.html">官方网址</a>  </li>
<li><a href="scali.cz/~cz210552/distfiles/webbench-1.5.tar.gz">下载地址</a></li>
<li>以下均在ubuntu16.04下操作</li>
</ul>
<p>下载远程webbench文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://home.tiscali.cz/~cz210552/distfiles/webbench-1.5.tar.gz</span><br></pre></td></tr></table></figure>
<p>tar解压要编译的文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf webbench-1.5.tar.gz</span><br></pre></td></tr></table></figure>
<p>编译与安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> webbench-1.5</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<h3 id="Webbench的使用"><a href="#Webbench的使用" class="headerlink" title="Webbench的使用"></a>Webbench的使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webbench -c 1000 -t 10 http://www.baidu.com</span><br></pre></td></tr></table></figure>
<ul>
<li>参数说明：-c表示并发数 -t表示时间（秒） baidu：目标url,注意url的格式  </li>
<li>测试结果示例</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Webbench - Simple Web Benchmark 1.5</span><br><span class="line">Copyright (c) Radim Kolar 1997-2004, GPL Open Source Software.</span><br><span class="line"></span><br><span class="line">Benchmarking: GET http://www.baidu.com/</span><br><span class="line">1000 clients, running 10 sec.</span><br><span class="line"></span><br><span class="line">Speed=8202 pages/min, 15556389 bytes/sec.</span><br><span class="line">Requests: 1341 susceed, 26 failed.</span><br></pre></td></tr></table></figure>
<h3 id="详细的参数使用说明"><a href="#详细的参数使用说明" class="headerlink" title="详细的参数使用说明"></a>详细的参数使用说明</h3><table>
<thead>
<tr>
<th style="text-align:left">短参数</th>
<th style="text-align:center">长参数</th>
<th style="text-align:right">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-f</td>
<td style="text-align:center">–force</td>
<td style="text-align:right">不需要等待服务器响应</td>
</tr>
<tr>
<td style="text-align:left">-r</td>
<td style="text-align:center">–reload</td>
<td style="text-align:right">发送重新加载请求</td>
</tr>
<tr>
<td style="text-align:left">-t</td>
<td style="text-align:center">–time</td>
<td style="text-align:right">运行多长时间，单位：秒</td>
</tr>
<tr>
<td style="text-align:left">-p</td>
<td style="text-align:center">–proxy server:port</td>
<td style="text-align:right">使用代理服务器来发送请求</td>
</tr>
<tr>
<td style="text-align:left">-c</td>
<td style="text-align:center">–clients</td>
<td style="text-align:right">创建多少个客户端，默认1个</td>
</tr>
<tr>
<td style="text-align:left">-9</td>
<td style="text-align:center">–http09</td>
<td style="text-align:right">使用 HTTP/0.9</td>
</tr>
<tr>
<td style="text-align:left">-1</td>
<td style="text-align:center">–http10</td>
<td style="text-align:right">使用 HTTP/1.0 协议</td>
</tr>
<tr>
<td style="text-align:left">-2</td>
<td style="text-align:center">–http11</td>
<td style="text-align:right">使用 HTTP/1.1 协议</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:center">–get</td>
<td style="text-align:right">使用 GET请求方法</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:center">–head</td>
<td style="text-align:right">使用 HEAD请求方法</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:center">–options</td>
<td style="text-align:right">使用 OPTIONS请求方法</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:center">–trace</td>
<td style="text-align:right">使用 TRACE请求方法</td>
</tr>
<tr>
<td style="text-align:left">-?/-h</td>
<td style="text-align:center">–help</td>
<td style="text-align:right">打印帮助信息</td>
</tr>
<tr>
<td style="text-align:left">-V</td>
<td style="text-align:center">–version</td>
<td style="text-align:right">显示版本号</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> 自用笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux top命令及CPU信息详解]]></title>
      <url>/linux_top/</url>
      <content type="html"><![CDATA[<p>top命令是linux的性能分析工具，可以实时的显示各个进程的资源占用情况，类似Windows的任务管理器。退出top的命令是q<br><a id="more"></a></p>
<h2 id="top信息详解"><a href="#top信息详解" class="headerlink" title="top信息详解"></a>top信息详解</h2><p><img src="http://ongsui5u0.bkt.clouddn.com/WechatIMG235.jpeg" alt=""></p>
<h3 id="第一部分信息"><a href="#第一部分信息" class="headerlink" title="第一部分信息"></a>第一部分信息</h3><p>第一行  </p>
<ul>
<li>121 total，为当前系统进程总数  </li>
<li>1 running，为当前运行中的进程数  </li>
<li>120 sleeping，为当前处于等待的进程数  </li>
<li>0 stopped，为被停止的系统进程数  </li>
<li>0 zombie，为被复原的系统进程数<br>第二行  </li>
<li>11:08:19，为系统当前时刻  </li>
<li>73 days，为系统启动到现在运行的时间  </li>
<li>1 user，为当前登录到系统的用户，更确切的说是登录到用户的终端数 – 同一个用户同一时间对系统多个终端的连接将被视为多个用户连接到系统，这里的用户数也将表现为终端的数目  </li>
<li>load average，为当前系统负载的平均值，后面的三个值分别为1分钟前、5分钟前、15分钟前进程的平均数，一般的可以认为这个数值超过 CPU 数目时，CPU 将比较吃力的负载当前系统所包含的进程<br>第三行%Cpu(s)  </li>
<li>0.8 us,用户空间占cpu的百分比  </li>
<li>0.0 sy,内核空间占CPU百分比  </li>
<li>0.0 ni,用户进程空间内改变过优先级的进程占用CPU百分比  </li>
<li>99.2 id,空闲CPU的百分比  </li>
<li>0.0 wa,cpu等待磁盘写入完成时间  </li>
<li>0.0 hi,硬终端消耗时间  </li>
<li>0.0 si,软终端消耗时间  </li>
<li>0.0 st,虚拟机偷取时间<br>第四行KiB Mem  </li>
<li>total,内存总量  </li>
<li>used,当前使用量  </li>
<li>free,当前空闲量  </li>
<li>buff/cache,缓冲使用中的内存量</li>
</ul>
<h3 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h3><ul>
<li>PID 进程ID  </li>
<li>USER 进程所有者的用户名  </li>
<li>PR 任务优先级  </li>
<li>NI nice值，数值越小优先级越高，数值越大优先级越低  </li>
<li>VIRT 进程使用的虚拟内存总量，单位：kb，VIRT=SWAP+RES   </li>
<li>RES 进程使用的、未被换出的物理内存大小，单位：kb。RES=CODE+DATA  </li>
<li>SHR 共享内存大小，单位：kb  </li>
<li>S 进程状态，D不可中断的睡眠状态，R运行，S睡眠，T跟踪/停止，z僵尸进程  </li>
<li>%CPU 上次更新到现在的 CPU 时间占用百分比  </li>
<li>TIME+ 进程使用的 CPU 时间总计，精确到 1/100 秒  </li>
<li>COMMAND 命令名 / 命令行</li>
</ul>
<h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><p>q -退出top</p>
]]></content>
      
        <categories>
            
            <category> 自用笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[apscheduler定时任务器]]></title>
      <url>/apscheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>使用apscheduler定时任务器给爬虫添加定时，让它自动定时爬取！简单的记录下apscheduler的使用！</p>
<a id="more"></a>
<h2 id="apscheduler定时任务器"><a href="#apscheduler定时任务器" class="headerlink" title="apscheduler定时任务器"></a>apscheduler定时任务器</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ </span><br><span class="line">pip install APScheduler</span><br></pre></td></tr></table></figure>
<h3 id="一个小定时器的demo"><a href="#一个小定时器的demo" class="headerlink" title="一个小定时器的demo"></a>一个小定时器的demo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">from apscheduler.schedulers.blocking import BlockingScheduler</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def my_job():</span><br><span class="line">    print (time.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;, time.localtime(time.time())))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    sched = BlockingScheduler()</span><br><span class="line">    sched.add_job(my_job, &apos;interval&apos;, seconds=5)</span><br><span class="line">    sched.start()</span><br></pre></td></tr></table></figure>
<ul>
<li>在程序运行5s后开始打印第一次程序运行的时间，然后每隔5s就会继续打印。但是我发现一个问题，如果我的时间设置为一个小时，第一次的程序就会等一个小时才会执行。我就改了一下程序，让第一次立即执行，然后每隔一个小时执行一次。</li>
<li>更改后的代码如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">from apscheduler.schedulers.blocking import BlockingScheduler</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def my_job():</span><br><span class="line">    print (time.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;, time.localtime(time.time())))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    sched = BlockingScheduler()</span><br><span class="line">    sched.add_job(my_job, &apos;interval&apos;, seconds=5, id=my_job())</span><br><span class="line">    sched.start()</span><br></pre></td></tr></table></figure>
<p>增加了一个id=my_job()<br>后续还有一些方法的，但是还没学习！</p>
<h2 id="未完。。。"><a href="#未完。。。" class="headerlink" title="未完。。。"></a>未完。。。</h2>]]></content>
      
        <categories>
            
            <category> 自用笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> Flask </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用七牛当图片存储仓库！]]></title>
      <url>/Qi_niu/</url>
      <content type="html"><![CDATA[<p>使用七牛作为图床存储图片，语言使用的是python！</p>
<a id="more"></a>
<h2 id="用七牛当图片存储仓库！"><a href="#用七牛当图片存储仓库！" class="headerlink" title="用七牛当图片存储仓库！"></a>用七牛当图片存储仓库！</h2><ul>
<li><a href="https://developer.qiniu.com/kodo/sdk/1242/python" target="_blank" rel="noopener">七牛官方SDK</a></li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li>直接安装</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install qiniu</span><br><span class="line">或</span><br><span class="line">easy_install qiniu</span><br></pre></td></tr></table></figure>
<ul>
<li>源码安装</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#从Python SDK 下载地址下载源码</span><br><span class="line">tar xvzf python-sdk-$VERSION.tar.gz</span><br><span class="line">cd python-sdk-$VERSION</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul>
<li>在使用SDK 前，您需要一对有效的 AccessKey 和 SecretKey 签名授权。</li>
<li>可以通过如下步骤获得：1.开通七牛开发者帐号 2.登录七牛开发者平台，查看 Access Key 和 Secret Key。</li>
<li>获取Access Key 和 Secret Key 后，调用如下两行代码进行初始化对接：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from qiniu import Auth</span><br><span class="line">q = Auth(access_key, secret_key)</span><br></pre></td></tr></table></figure>
<h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">from qiniu import Auth, put_file</span><br><span class="line"></span><br><span class="line"># 填写你的Access Key 和 Secret Key</span><br><span class="line">access_key = &apos;Access_Key&apos;</span><br><span class="line">secret_key = &apos;Secret_Key&apos;</span><br><span class="line"></span><br><span class="line">#构建鉴权对象</span><br><span class="line">q = Auth(access_key, secret_key)</span><br><span class="line"></span><br><span class="line">#要上传的空间</span><br><span class="line">bucket_name = &apos;Bucket_Name&apos;</span><br><span class="line"></span><br><span class="line">#上传到七牛后保存的文件名</span><br><span class="line">key = &apos;my-python-logo.png&apos;</span><br><span class="line"></span><br><span class="line">#生成上传 Token，可以指定过期时间等</span><br><span class="line">token = q.upload_token(bucket_name, key, 3600)</span><br><span class="line"></span><br><span class="line">#要上传文件的本地路径</span><br><span class="line">localfile = &apos;./sync/bbb.jpg&apos;</span><br><span class="line"></span><br><span class="line">put_file(token, key, localfile)</span><br></pre></td></tr></table></figure>
<ul>
<li>下面是一个非常简单的上传demo：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">from qiniu import Auth, put_file</span><br><span class="line">access_key = &quot;bUU6U40lkXL5xKTZHkB0XmE&quot;</span><br><span class="line">secret_key = &quot;Lt6Q7U5Oti_HP4bCteLyy&quot;</span><br><span class="line">q = Auth(access_key, secret_key)</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&apos;/&apos;)</span><br><span class="line">def hello_world():</span><br><span class="line">    bucket_name = &apos;####&apos;</span><br><span class="line">    number = &quot;123&quot;</span><br><span class="line">    key = &apos;&#123;0&#125;&apos;.format(number)</span><br><span class="line">    token = q.upload_token(bucket_name, key, 3600)</span><br><span class="line">    localfile = &apos;......./static/img/v2-c947dc2dcc534f93f295cae1df1f0d31_hd.jpg&apos;</span><br><span class="line">    put_file(token, key, localfile)</span><br><span class="line">    return &apos;Hello World!&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>
<p>记得把access_key、secret_key、bucket_name、localfile换成自己的。</p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><ul>
<li><p>有两种构造base_url的形式 1.base_url = ‘<a href="http://%s/%s" target="_blank" rel="noopener">http://%s/%s</a>‘ % (bucket_domain, key)  2. base_url = ‘<a href="http://domain/key&#39;（直接输入url的方式下载），我使用的是第一种" target="_blank" rel="noopener">http://domain/key&#39;（直接输入url的方式下载），我使用的是第一种</a></p>
</li>
<li><p>bucket_domain是图片仓库的外链默认域名<br>-<img src="http://ongsui5u0.bkt.clouddn.com/WechatIMG231.jpeg" alt=""></p>
</li>
<li><p>key 是你之前存储过的，我这里的key就是123</p>
</li>
<li><p>设置token过期时间</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private_url = q.private_download_url(base_url, expires=3600)</span><br></pre></td></tr></table></figure>
<ul>
<li>下面是一个简单的下载demo：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/1&apos;)</span><br><span class="line">def down_load():</span><br><span class="line">    bucket_domain = &apos;oz4pkhxf8.bkt.clouddn.com&apos;</span><br><span class="line">    number = &quot;123&quot;</span><br><span class="line">    key_image_qiniu = &apos;&#123;0&#125;&apos;.format(number)</span><br><span class="line">    key = key_image_qiniu</span><br><span class="line">    base_url = &apos;http://%s/%s&apos; % (bucket_domain, key)</span><br><span class="line">    private_url = q.private_download_url(base_url, expires=3600)</span><br><span class="line">    print(private_url)</span><br><span class="line">    return &quot;121&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>private_url的地址就是我们想要的图片的地址<h2 id="github有比较完整的例子"><a href="#github有比较完整的例子" class="headerlink" title="github有比较完整的例子"></a>github有比较完整的例子</h2></li>
</ul>
<p>想看更详细的例子，<a href="#">戳这里</a></p>
]]></content>
      
        <categories>
            
            <category> 原创 </category>
            
            <category> 自用笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> Flask </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决跨域问题]]></title>
      <url>/cors/</url>
      <content type="html"><![CDATA[<p>解决跨域请求。使用Flask-CORS就可以解决！</p>
<a id="more"></a>
<h2 id="使用Flask-CORS解决跨域请求，官网"><a href="#使用Flask-CORS解决跨域请求，官网" class="headerlink" title="使用Flask-CORS解决跨域请求，官网"></a>使用Flask-CORS解决跨域请求，<a href="http://flask-cors.readthedocs.io/en/latest/" target="_blank" rel="noopener">官网</a></h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install -U flask-cors</span><br></pre></td></tr></table></figure>
<h3 id="基本的使用方法"><a href="#基本的使用方法" class="headerlink" title="基本的使用方法"></a>基本的使用方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">from flask_cors import CORS</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">CORS(app)</span><br><span class="line"></span><br><span class="line">@app.route(&quot;/&quot;)</span><br><span class="line">def helloWorld():</span><br><span class="line">  return &quot;Hello, cross-origin-world!&quot;</span><br></pre></td></tr></table></figure>
<h3 id="对指定的资源增加cors"><a href="#对指定的资源增加cors" class="headerlink" title="对指定的资源增加cors"></a>对指定的资源增加cors</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line">cors = CORS(app, resources=&#123;r&quot;/api/*&quot;: &#123;&quot;origins&quot;: &quot;*&quot;&#125;&#125;)</span><br><span class="line"></span><br><span class="line">@app.route(&quot;/api/v1/users&quot;)</span><br><span class="line">def list_users():</span><br><span class="line">  return &quot;user example&quot;</span><br></pre></td></tr></table></figure>
<h3 id="在蓝图中使用Flask-CORS"><a href="#在蓝图中使用Flask-CORS" class="headerlink" title="在蓝图中使用Flask-CORS"></a>在蓝图中使用Flask-CORS</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from flask import Blueprint</span><br><span class="line">from flask_cors import CORS</span><br><span class="line">experience = Blueprint(&apos;experience&apos;, __name__, url_prefix=&apos;/experience&apos;)</span><br><span class="line">CORS(experience)</span><br><span class="line"></span><br><span class="line">@experience.route(&apos;/&apos;)</span><br><span class="line">def experiences_demo():</span><br><span class="line">	return &quot;Hello,world!&quot;</span><br></pre></td></tr></table></figure>
<p>更详细的Using CORS with Blueprints看<a href="https://flask-cors.readthedocs.io/en/latest/api.html#extension" target="_blank" rel="noopener">官方文档</a></p>
]]></content>
      
        <categories>
            
            <category> 自用笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> Flask </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Webhooks bitbucket进行服务器自动化部署代码]]></title>
      <url>/Pycharm%20Webhooks%20bitbucket/</url>
      <content type="html"><![CDATA[<p>每次部署代码都需要在服务器从bitbucket仓库重新拉取一次，这个过程次数多了真的很浪费时间，弄了一个服务器端自动化部署代码！  </p>
<a id="more"></a>
<h2 id="Pycharm-Webhooks-bitbucket进行服务器自动化部署代码"><a href="#Pycharm-Webhooks-bitbucket进行服务器自动化部署代码" class="headerlink" title="Pycharm Webhooks bitbucket进行服务器自动化部署代码"></a>Pycharm Webhooks bitbucket进行服务器自动化部署代码</h2><p>自动部署的整个过程，在pycharm中push代码至bitbucket存储仓库，仓库接受到新的代码后会向我们设置好的路由地址发送一个post请求，当我们的服务器收到请求后进行拉取新的代码并重启服务。这样就完成了自动部署！</p>
<h3 id="上传代码至bitbucket"><a href="#上传代码至bitbucket" class="headerlink" title="上传代码至bitbucket"></a>上传代码至bitbucket</h3><ul>
<li>项目代码仓库使用的是bitbucket，我编辑器用的是pycharm，配置好pycharm可以一键上传代码至bitbucket仓库，再也不用繁琐的git命令了，有关pycharm上传代码至bitbucket的配置请看<a href="http://lfivesix.com/use%20pycharm/" target="_blank" rel="noopener">这里</a>。</li>
</ul>
<h3 id="存储仓库bitbucket的设置"><a href="#存储仓库bitbucket的设置" class="headerlink" title="存储仓库bitbucket的设置"></a>存储仓库bitbucket的设置</h3><ul>
<li>bitbucket的设置很简单，贴一下图片，看图就可以看的懂！（url的由来看下面，下面会告诉url怎么来的）</li>
<li><a href=""></a></li>
</ul>
<h3 id="服务器端配置"><a href="#服务器端配置" class="headerlink" title="服务器端配置"></a>服务器端配置</h3><ul>
<li>服务器是阿里云的服务器，用的uwsgi+nginx+flask搭建的，有关怎么配置服务器请看<a href="http://lfivesix.com/uwsgi%20nginx%20flask/" target="_blank" rel="noopener">这里</a>,这里只贴怎么自动化部署代码！</li>
<li>我们先来定义路由，就是在bitbucket设置需要填写的路由。因为我使用的是flask搭建的，涉及到了csrf保护，如果不懂csrf去<a href="http://www.pythondoc.com/flask-wtf/csrf.html" target="_blank" rel="noopener">这里自行了解</a>，每次运行都会出现400的错误，因为我们没有通过CSRF 验证，我把验证关了！</li>
<li>在你的代码中加入下面的代码：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from flask_wtf.csrf import CSRFProtect</span><br><span class="line">csrf = CSRFProtect()</span><br><span class="line">csrf.init_app(app)</span><br></pre></td></tr></table></figure>
<ul>
<li>然后在不需要保护的路由上当加上:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@csrf.exempt</span><br></pre></td></tr></table></figure>
<p>这样400的http错误就解决了。这时候你在pycharm上传代码，只是上传到了仓库，我们还需要在函数中执行拉取新代码并且重启服务!  </p>
<h3 id="编写自动拉取新代码的脚本"><a href="#编写自动拉取新代码的脚本" class="headerlink" title="编写自动拉取新代码的脚本"></a>编写自动拉取新代码的脚本</h3><p>编写mcld.sh脚本，代码如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /www/mcld/</span><br><span class="line">git stash</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /etc/supervisor/</span><br><span class="line">supervisorctl restart all</span><br></pre></td></tr></table></figure>
<ul>
<li>解释:拉取了最新代码并且重启了服务，我进程监控用的supervisorctl</li>
</ul>
<h3 id="在函数中执行mcld-sh脚本"><a href="#在函数中执行mcld-sh脚本" class="headerlink" title="在函数中执行mcld.sh脚本"></a>在函数中执行mcld.sh脚本</h3><p>代码片段示例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@csrf.exempt</span><br><span class="line">@app.route(<span class="string">'/webhook'</span>, methods=[<span class="string">'POST'</span>])</span><br><span class="line">def webhook():</span><br><span class="line">    <span class="comment"># status = os.system('sh /str/mcld.sh')</span></span><br><span class="line">    status = subprocess.Popen([<span class="string">'sh /str/mcld.sh'</span>], shell=True)</span><br><span class="line">    <span class="built_in">return</span> <span class="string">"succeed"</span></span><br></pre></td></tr></table></figure>
<ul>
<li>status = os.system(‘sh /str/mcld.sh’)，使用这个或者subprocess.call([‘sh /str/mcld.sh’], shell=True)在bitbucket上一直显示timeout，因为是仓库发送了post请求，然后服务器收到请求生成子进程去执行脚本程序，但是需要子进程结束后才返给bitbucket，所以显示timeout。而subprocess.Popen([‘sh /str/mcld.sh’], shell=True)收到了请求直接就返回给bitbucket，和执行脚本的子进程互不干扰。（我是这么理解的）</li>
<li>subprocess的目的就是启动一个新的进程并且与之通信。subprocess模块中只定义了一个类: Popen。可以使用Popen来创建进程，并与进程进行复杂的交互。它的构造函数如下：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subprocess.Popen(args, bufsize=0, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=False, shell=False, cwd=None, env=None, universal_newlines=False, startupinfo=None, creationflags=0)</span><br></pre></td></tr></table></figure>
<ul>
<li>参数args可以是字符串或者序列类型（如：list，元组），用于指定进程的可执行文件及其参数。如果是序列类型，第一个元素通常是可执行文件的路径。我们也可以显式的使用executeable参数来指定可执行文件的路径。  </li>
<li>参数stdin, stdout, stderr分别表示程序的标准输入、输出、错误句柄。他们可以是PIPE，文件描述符或文件对象，也可以设置为None，表示从父进程继承。<br>如果参数shell设为true，程序将通过shell来执行。  </li>
<li>参数env是字典类型，用于指定子进程的环境变量。如果env = None，子进程的环境变量将从父进程中继承。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subprocess.PIPE</span><br></pre></td></tr></table></figure>
<p>在创建Popen对象时，subprocess.PIPE可以初始化stdin, stdout或stderr参数。表示与子进程通信的标准流。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subprocess.STDOUT</span><br></pre></td></tr></table></figure>
<p>创建Popen对象时，用于初始化stderr参数，表示将错误通过标准输出流输出。<br>Popen的方法:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Popen.poll()</span><br></pre></td></tr></table></figure>
<p>用于检查子进程是否已经结束。设置并返回returncode属性。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Popen.wait()</span><br></pre></td></tr></table></figure>
<p>等待子进程结束。设置并返回returncode属性。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Popen.communicate(input=None)</span><br></pre></td></tr></table></figure>
<p>与子进程进行交互。向stdin发送数据，或从stdout和stderr中读取数据。可选参数input指定发送到子进程的参数。Communicate()返回一个元组：(stdoutdata, stderrdata)。注意：如果希望通过进程的stdin向其发送数据，在创建Popen对象的时候，参数stdin必须被设置为PIPE。同样，如果希望从stdout和stderr获取数据，必须将stdout和stderr设置为PIPE。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Popen.send_signal(signal)</span><br></pre></td></tr></table></figure>
<p>向子进程发送信号。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Popen.terminate()</span><br></pre></td></tr></table></figure>
<p>停止(stop)子进程。在windows平台下，该方法将调用Windows API TerminateProcess（）来结束子进程。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Popen.kill()</span><br></pre></td></tr></table></figure>
<p>杀死子进程。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Popen.pid</span><br></pre></td></tr></table></figure>
<p>获取子进程的进程ID。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Popen.returncode</span><br></pre></td></tr></table></figure>
<p>获取进程的返回值。如果进程还没有结束，返回None。</p>
<h2 id="这样就实现了一键上传代码至存储仓库和自动部署代码到服务器"><a href="#这样就实现了一键上传代码至存储仓库和自动部署代码到服务器" class="headerlink" title="这样就实现了一键上传代码至存储仓库和自动部署代码到服务器"></a>这样就实现了一键上传代码至存储仓库和自动部署代码到服务器</h2><p>　</p>
<p>　　</p>
<p>　　</p>
]]></content>
      
        <categories>
            
            <category> 原创 </category>
            
            <category> 自用笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> webhooks </tag>
            
            <tag> bitbucket </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python的零散的小知识点]]></title>
      <url>/knowledge_point/</url>
      <content type="html"><![CDATA[<p>记录一些python的零散知识点！</p>
<a id="more"></a>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="Str-转-dict"><a href="#Str-转-dict" class="headerlink" title="Str 转 dict"></a>Str 转 dict</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ A = <span class="built_in">eval</span>(B)</span><br></pre></td></tr></table></figure>
<ul>
<li>eg:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ A = <span class="built_in">eval</span>(B)</span><br><span class="line">$ eg: user = <span class="string">"&#123;'name' : 'jim', 'sex' : 'male', 'age': 18&#125;"</span></span><br><span class="line">$ b=<span class="built_in">eval</span>(user)</span><br><span class="line">$ &gt;&gt;&gt; b</span><br><span class="line">$ &#123;<span class="string">'age'</span>: 18, <span class="string">'name'</span>: <span class="string">'jim'</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="整理dict"><a href="#整理dict" class="headerlink" title="整理dict"></a>整理dict</h3><ul>
<li>将凌乱的字典转换成带缩进的，树状的效果，用以下的方法：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">jsonDumpsIndentStr = json.dumps(demoDictList, indent=1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"jsonDumpsIndentStr="</span>, jsonDumpsIndentStr)</span><br></pre></td></tr></table></figure>
<ul>
<li>添加indent=1，就会变成带缩进的，树状的效果，没有的话就是紧凑型的！</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 自用笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mongodb地理位置索引]]></title>
      <url>/mongodb%20index/</url>
      <content type="html"><![CDATA[<p>简单记录mongodb地理位置索引，mongodb地理位置索引分两种：2d索引、2dsphere索引</p>
<a id="more"></a>
<p>mongodb地理位置索引分两种：</p>
<ul>
<li>2d索引（存储查找平面上的点，2d索引同时支持平面和球面几何）</li>
<li>2dsphere索引（存储查找球面上的点， 2dsphere 索引只能支持球面几何，在 2dsphere索引上使用球面几何的查询将会更高效和准确）</li>
</ul>
<h2 id="2d索引"><a href="#2d索引" class="headerlink" title="2d索引"></a>2d索引</h2><ul>
<li>插入数据：在集合d中插入</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.d.insert(&#123;name:<span class="string">"北京"</span>,location:[90,70]&#125;)...</span><br></pre></td></tr></table></figure>
<p>location 是一个数组，包含两个值，经度[-180,180]和纬度[-90,90]</p>
<h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.d.ensureIndex(&#123;<span class="string">"location"</span>:<span class="string">"2d"</span>&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>location与插入数据时候的location一致</li>
</ul>
<h3 id="查询，-查询有三种near-geoWithin-geoNear-near"><a href="#查询，-查询有三种near-geoWithin-geoNear-near" class="headerlink" title="查询， 查询有三种near,geoWithin,geoNear near"></a>查询， 查询有三种near,geoWithin,geoNear near</h3><h3 id="near"><a href="#near" class="headerlink" title="near"></a>near</h3><ul>
<li>返回的是由近及远的100条数据</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.d.find(&#123;location:&#123;<span class="variable">$near</span>:[90,70]&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>limit(n)n限制返回的条数</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.d.find(&#123;location:&#123;<span class="variable">$near</span>:[90,70]&#125;).<span class="built_in">limit</span>(n)</span><br></pre></td></tr></table></figure>
<h3 id="根据距离来返回地点-maxDistance"><a href="#根据距离来返回地点-maxDistance" class="headerlink" title="根据距离来返回地点$maxDistance"></a>根据距离来返回地点$maxDistance</h3><ul>
<li>$maxDistance官网解释地址: <a href="https://docs.mongodb.com/manual/" target="_blank" rel="noopener">https://docs.mongodb.com/manual/</a></li>
<li>返回1400km以内的点</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.d.find(&#123; location: &#123;<span class="variable">$near</span>: [116.23,39.54],<span class="variable">$maxDistance</span>:1400/111.12 &#125;&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="geoWithin查询"><a href="#geoWithin查询" class="headerlink" title="geoWithin查询"></a>geoWithin查询</h3><p>该查询方式用于查询某个形状内的点，形状主要有矩形、圆形、多边形三种，分别表示如下:</p>
<ul>
<li>矩形，box的两个值分别代表矩形左上角与右下角的坐标</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.集合名.find(&#123;pos:&#123;<span class="variable">$geoWithin</span>:&#123;<span class="variable">$box</span>:[[0,0],[3,3]]&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>圆形，center的两个值分别代表圆心的坐标与半径</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.集合名.find(&#123;pos:&#123;<span class="variable">$geoWithin</span>:&#123;<span class="variable">$center</span>:[[0,0],r]&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>矩形，polygon的值代表多边形各个顶点的坐标</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.集合名.find(&#123;pos:&#123;<span class="variable">$geoWithin</span>:&#123;<span class="variable">$polygon</span>:[[0,0],[3,3],[4,4],……]&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="geoNear查询-geoNear查询使用runCommand命令进行使用"><a href="#geoNear查询-geoNear查询使用runCommand命令进行使用" class="headerlink" title="geoNear查询,geoNear查询使用runCommand命令进行使用"></a>geoNear查询,geoNear查询使用runCommand命令进行使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ db.runCommand(&#123;</span><br><span class="line">    geoNear:集合名字符串,</span><br><span class="line">    near:坐标数组,</span><br><span class="line">    minDistance:最小距离,可选</span><br><span class="line">    maxDistance:最多距离,可选</span><br><span class="line">    num:限制返回结果的数目</span><br><span class="line">)&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.runCommand(&#123;<span class="string">"geoNear"</span>:<span class="string">"d"</span>,<span class="string">"near"</span>:[116.23,39.54]&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>返回的结果如下:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$ &#123;</span><br><span class="line">	<span class="string">"results"</span> : [</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="string">"dis"</span> : 0,</span><br><span class="line">			<span class="string">"obj"</span> : &#123;</span><br><span class="line">				<span class="string">"_id"</span> : ObjectId(<span class="string">"59f2beb0476ef85f73f31d61"</span>),</span><br><span class="line">				<span class="string">"name"</span> : <span class="string">"北京"</span>,</span><br><span class="line">				<span class="string">"location"</span> : [</span><br><span class="line">					116.23,</span><br><span class="line">					39.54</span><br><span class="line">				]</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="string">"dis"</span> : 11.771325328950857,</span><br><span class="line">			<span class="string">"obj"</span> : &#123;</span><br><span class="line">				<span class="string">"_id"</span> : ObjectId(<span class="string">"59f2be99476ef85f73f31d60"</span>),</span><br><span class="line">				<span class="string">"name"</span> : <span class="string">"中央大街"</span>,</span><br><span class="line">				<span class="string">"location"</span> : [</span><br><span class="line">					126.23,</span><br><span class="line">					45.75</span><br><span class="line">				]</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	],</span><br><span class="line">	<span class="string">"stats"</span> : &#123;</span><br><span class="line">		<span class="string">"nscanned"</span> : 45,</span><br><span class="line">		<span class="string">"objectsLoaded"</span> : 2,</span><br><span class="line">		<span class="string">"avgDistance"</span> : 5.885662664475428,</span><br><span class="line">		<span class="string">"maxDistance"</span> : 11.771325328950857,</span><br><span class="line">		<span class="string">"time"</span> : 1</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">"ok"</span> : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>注：2d只适合两点间距离不是很远的情况下，距离近经纬网可以看成平面直角坐标系，距离大了以后随着地球曲率的影响，这样的计算就不准确了，就应该使用2dsphere</li>
</ul>
<h2 id="2dsphere索引"><a href="#2dsphere索引" class="headerlink" title="2dsphere索引"></a>2dsphere索引</h2><h3 id="创建索引-1"><a href="#创建索引-1" class="headerlink" title="创建索引"></a>创建索引</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.d.ensureIndex(&#123;location:”2dsphere”&#125;)</span><br></pre></td></tr></table></figure>
<p>在2dsphere索引中，位置的表示方式不再是[经度，纬度]，它的表示方式叫做GeoJSON，GeoJSON的写法为：{type:”Point/LineString/Polygon”,coordinates:[经度,纬度]，其中type字段表示当前坐标是一个点的坐标还是一条线或者一个多边形的；coordinates字段则表示当前位置的坐标——如果是一个点，那就是该点的经度维度、如果是一条线，则是线起点与终点的坐标、如果是多边形，则是多边形各个顶点的坐标。需要注意的是，使用2dsphere索引的数据中必须有GeoJSON字段<br>参考<a href="http://www.mongoing.com/mongodb-geo-index-1/" target="_blank" rel="noopener">这里</a></p>
<ul>
<li>分别下载示例数据集：neighborhoods和restaurant。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://raw.githubusercontent.com/mongodb/docs-assets/geospatial/neighborhoods.json</span><br><span class="line">$ wget https://raw.githubusercontent.com/mongodb/docs-assets/geospatial/restaurants.json</span><br></pre></td></tr></table></figure>
<ul>
<li>它们分别包括了邻居和饭店的集合。</li>
</ul>
<h3 id="geoIntersects"><a href="#geoIntersects" class="headerlink" title="$geoIntersects"></a>$geoIntersects</h3><ul>
<li>提供一个用户非常精确的位置，那么使用 $geoIntersects 来找到用户当前所在的居民区就是非常容易的了。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.neighborhoods.findOne(&#123; geometry: &#123; <span class="variable">$geoIntersects</span>: &#123; <span class="variable">$geometry</span>: &#123; <span class="built_in">type</span>: <span class="string">"Point"</span>, coordinates: [ -73.93414657, 40.82302903 ] &#125; &#125; &#125; &#125;)</span><br></pre></td></tr></table></figure>
<h3 id="nearSphere"><a href="#nearSphere" class="headerlink" title="$nearSphere"></a>$nearSphere</h3><ul>
<li>由近及远的返回 location 该地点5公里以内的5个地点。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locations = db.locations.find(&#123;<span class="string">"location"</span>: &#123;<span class="string">"<span class="variable">$nearSphere</span>"</span>: &#123;<span class="string">"<span class="variable">$geometry</span>"</span>: &#123;<span class="string">"type"</span>: <span class="string">"Point"</span>, <span class="string">"coordinates"</span>: conduct_str2float(point)&#125;, <span class="string">"<span class="variable">$maxDistance</span>"</span>: 5 * 1609.34&#125;&#125;&#125;).<span class="built_in">limit</span>(5)</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 自用笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Flask Nginx uwsgi部署服务器]]></title>
      <url>/uwsgi%20nginx%20flask/</url>
      <content type="html"><![CDATA[<p>用Flask+Nginx+Uwsgi 部署服务器。服务器(Ubuntu 16.04) 简单的部署web网站</p>
<a id="more"></a>
<h2 id="Flask-Nginx-Uwsgi配置服务器"><a href="#Flask-Nginx-Uwsgi配置服务器" class="headerlink" title="Flask+Nginx+Uwsgi配置服务器"></a>Flask+Nginx+Uwsgi配置服务器</h2><h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get update</span><br></pre></td></tr></table></figure>
<h3 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install python-pip</span><br></pre></td></tr></table></figure>
<h3 id="升级pip"><a href="#升级pip" class="headerlink" title="升级pip"></a>升级pip</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install --upgrade pip</span><br></pre></td></tr></table></figure>
<h2 id="安装uWSGI"><a href="#安装uWSGI" class="headerlink" title="安装uWSGI"></a>安装uWSGI</h2><p>在安装uWSGI前，需要解决uWSGI的依赖问题，因为uWSGI是一个C语言写的应用，所以我们需要C编译器，以及python开发相关组件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install build-essential </span><br><span class="line">$ apt-get install python-dev </span><br><span class="line">$ pip install uwsgi</span><br></pre></td></tr></table></figure></p>
<h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install nginx</span><br></pre></td></tr></table></figure>
<h3 id="nginx的启动命令"><a href="#nginx的启动命令" class="headerlink" title="nginx的启动命令"></a>nginx的启动命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /etc/init.d/nginx start</span><br></pre></td></tr></table></figure>
<h3 id="nginx重新启动"><a href="#nginx重新启动" class="headerlink" title="nginx重新启动"></a>nginx重新启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /etc/init.d/nginx restart</span><br></pre></td></tr></table></figure>
<p>这时候在浏览器地址栏输入服务器的 ip 地址，看到下面的页面就表明 Nginx 已经成功启动了！<br><img src="http://ongsui5u0.bkt.clouddn.com/WechatIMG216.jpeg" alt="1"></p>
<h2 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h2><p>删除nginx的配置文件，新建一个配置文件default，配置信息如下：</p>
<h3 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h3><ul>
<li>server_name域名或者服务器公网ip  </li>
<li>uwsgi_pass 是nginx和uwsgi交流方式，在uwsgi中要一致  </li>
<li>uwsgi_param UWSGI_CHDIR 指向网站的根目录  </li>
<li>uwsgi_param UWSGI_SCRIPT 指定的启动程序 这里的li为启动程序名</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name 39.106.54.158;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                include uwsgi_params;</span><br><span class="line">                uwsgi_pass 127.0.0.1:5000;</span><br><span class="line">                uwsgi_param UWSGI_CHDIR /www/firstflask;</span><br><span class="line">                uwsgi_param UWSGI_SCRIPT li:app;</span><br><span class="line">                   &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h3 id="配置-uwsgi"><a href="#配置-uwsgi" class="headerlink" title="配置 uwsgi"></a>配置 uwsgi</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ [uwsgi]</span><br><span class="line">	socket = 127.0.0.1:5000</span><br><span class="line">	processes = 4</span><br><span class="line">	threads = 2</span><br><span class="line">	master = <span class="literal">true</span></span><br><span class="line">	pythonpath = /www/firstflask</span><br><span class="line">	module = li</span><br><span class="line">	callable = app</span><br><span class="line">	memory-report = <span class="literal">true</span></span><br><span class="line">	logto = /www/firstflask/myuwsgi.log</span><br></pre></td></tr></table></figure>
<ul>
<li>注释  </li>
<li>千万千万千万记得加[uwsgi]</li>
<li>socket 和 nginx配置中uwsgi_pass一样</li>
<li>pythonpath 为项目的路径</li>
<li>module 表示项目启动模块，如上例为li.py，这里就为li</li>
<li>callable  表示Flask项目的实例名称，上例代码中app = Flask(<strong>name</strong>)，所以这里为app</li>
<li>logto uwsgi生成log的路径</li>
<li>processes：表示开启多少个子进程处理请求。</li>
<li>threads：每个进程的线程数。</li>
</ul>
<h3 id="进程监控"><a href="#进程监控" class="headerlink" title="进程监控"></a>进程监控</h3><p>安装supervisor仅支持python2（安装的时候要切换到python2下 apt-get install×××）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install supervisor</span><br></pre></td></tr></table></figure>
<ul>
<li>supervisor的全局配置文件在/etc/supervisor/supervisor.conf中。  </li>
<li>新建一个my_supervisor.conf在/etc/supervisor/conf.d</li>
<li>my_supervisor.conf配置信息如下：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ [program:firstflask]</span><br><span class="line">	<span class="built_in">command</span>=uwsgi --ini /www/firstflask/myuwsgi.ini</span><br><span class="line">	directory=/www/firstflask</span><br></pre></td></tr></table></figure>
<ul>
<li>其他参数：</li>
<li>autorestart = true</li>
<li>user = root</li>
<li>autostart = true<br>注释：  </li>
<li>分别保存标准输出和标准错误日志，如果 uwsgi 启动出错，可以去日志里面找原因</li>
<li>运行日志：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ stdout_logfile=/var/<span class="built_in">log</span>/uwsgi/supervisor_chihu.log</span><br></pre></td></tr></table></figure>
<ul>
<li>错误日志：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ stderr_logfile=/var/<span class="built_in">log</span>/uwsgi/supervisor_chihu_err.log</span><br></pre></td></tr></table></figure>
<ul>
<li>参数含义：</li>
<li>[program:firstflask] firstflask为项目名称。eg：我的项目/www/firstflask/li.py</li>
<li>command uwsgi的启动命令 写的绝对路径</li>
<li>directory 项目路径</li>
<li>user = root root 用户启动</li>
<li>autostart = true     ; 在 supervisord 启动的时候也自动启动</li>
<li>autorestart = true   ; 程序异常退出后自动重启<br>第一次用supervisor还有写配置不太清楚，现在这个配置可以支持项目跑起来了</li>
</ul>
<h3 id="关于supervisord的一些命令"><a href="#关于supervisord的一些命令" class="headerlink" title="关于supervisord的一些命令"></a>关于supervisord的一些命令</h3><p>启动supervisord：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ supervisorctl reload</span><br></pre></td></tr></table></figure>
<ul>
<li>在/etc/supervisor目录下执行，记得将python切换成Python2</li>
</ul>
<p>停止Supervisor(子进程也会被停止)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ supervisorctl shutdown</span><br></pre></td></tr></table></figure>
<p>检查uwsgi进程是否正常运行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ps aux|grep uwsgi</span><br></pre></td></tr></table></figure>
<p>查看Supervisor是否已经启动：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ps -ef | grep supervisor</span><br></pre></td></tr></table></figure>
<p>查看业务进程是否已经被拉起：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ supervisorctl status</span><br></pre></td></tr></table></figure>
<p>查询各进程运行状态</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ supervisorctl status</span><br></pre></td></tr></table></figure>
<p>启、停、重启业务进程,check12306为进程名,即[program:check12306]里配置的值</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ supervisorctl start check12306</span><br><span class="line">  supervisorctl stop check12306</span><br><span class="line">  supervisorctl restart check12306</span><br></pre></td></tr></table></figure>
<p>重启所有属于名为groupworker这个分组的进程</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ supervisorctl start groupworker</span><br><span class="line">  supervisorctl stop groupworker</span><br><span class="line">  supervisorctl restart groupworker</span><br></pre></td></tr></table></figure>
<p>启、停、重启全部进程(不会载入最新的配置文件)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ supervisorctl start all</span><br><span class="line">  supervisorctl stop all</span><br><span class="line">  supervisorctl restart all</span><br></pre></td></tr></table></figure>
<p>重新加载配置文件.停止原有进程并按新的配置启动所有进程</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ supervisorctl reload</span><br></pre></td></tr></table></figure>
<ul>
<li>在/etc/supervisor目录下执行，记得将python切换成Python2</li>
</ul>
<p>根据最新的配置文件,启动新配置或有改动的进程,配置没有改动的进程不会受影响而重启。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ supervisorctl update</span><br></pre></td></tr></table></figure>
<p>注意:显示用stop停止掉的进程，用reload或者update都不会自动重启</p>
<h2 id="ubuntu16-04-下的Python切换"><a href="#ubuntu16-04-下的Python切换" class="headerlink" title="ubuntu16.04 下的Python切换"></a>ubuntu16.04 下的Python切换</h2><h3 id="ubuntu16-04-自带python2-Python3"><a href="#ubuntu16-04-自带python2-Python3" class="headerlink" title="ubuntu16.04 自带python2 Python3"></a>ubuntu16.04 自带python2 Python3</h3><ul>
<li>python -V 查看Python版本</li>
</ul>
<h3 id="ubuntu16-04-下的Python切换-1"><a href="#ubuntu16-04-下的Python切换-1" class="headerlink" title="ubuntu16.04 下的Python切换"></a>ubuntu16.04 下的Python切换</h3><ul>
<li>python2切换到python3</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ update-alternatives --install /usr/bin/python python /usr/bin/python2 100</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ update-alternatives --install /usr/bin/python python /usr/bin/python3 150</span><br></pre></td></tr></table></figure>
<ul>
<li>切换回2</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo update-alternatives --config python</span><br></pre></td></tr></table></figure>
<ul>
<li>输入你想变成版本对应的Selection</li>
</ul>
<h2 id="贴一下中间出的错误"><a href="#贴一下中间出的错误" class="headerlink" title="贴一下中间出的错误"></a>贴一下中间出的错误</h2><h3 id="删除Nginx"><a href="#删除Nginx" class="headerlink" title="删除Nginx"></a>删除Nginx</h3><p>用到的所有命令如下：</p>
<ul>
<li>删除nginx，–purge包括配置文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get --purge remove nginx</span><br></pre></td></tr></table></figure>
<ul>
<li>罗列出与nginx相关的软件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dpkg --get-selections|grep nginx</span><br></pre></td></tr></table></figure>
<ul>
<li>删除上面查询出与nginx有关的软件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get --purge remove ×××××</span><br></pre></td></tr></table></figure>
<ul>
<li>查看nginx正在运行的进程，如果有就kill掉</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ps -ef |grep nginx  </span><br><span class="line">$ <span class="built_in">kill</span> nginx进程  </span><br><span class="line">$ <span class="built_in">kill</span>  -9 pid</span><br></pre></td></tr></table></figure>
<ul>
<li>全局查找与nginx相关的文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find  /  -name  nginx*</span><br></pre></td></tr></table></figure>
<ul>
<li>依依删除4列出的所有文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm -rf file</span><br></pre></td></tr></table></figure>
<p>这样就可以完全卸载掉nginx包括配置文件，彻底删除nginx了</p>
<ul>
<li>再次重装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get update</span><br><span class="line">$ apt-get install nginx</span><br></pre></td></tr></table></figure>
<h3 id="使用ubuntu命令是出现的问题"><a href="#使用ubuntu命令是出现的问题" class="headerlink" title="使用ubuntu命令是出现的问题"></a>使用ubuntu命令是出现的问题</h3><ul>
<li>按照[这里给的三个办法解决了。] <a href="http://wenzhixin.net.cn/2014/01/11/ubuntu_setting_locale_failed" target="_blank" rel="noopener">http://wenzhixin.net.cn/2014/01/11/ubuntu_setting_locale_failed</a></li>
<li>但是我记得我好像是第三个办法解决的，当时错误信息丢失了。下次再碰见在补上吧，只记得输入locale有如下信息。</li>
<li><p>locale</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">locale: Cannot <span class="built_in">set</span> LC_CTYPE to default locale: No such file or directory</span><br><span class="line">locale: Cannot <span class="built_in">set</span> LC_ALL to default locale: No such file or directory</span><br><span class="line">LANG=en_US.UTF-8</span><br><span class="line">LANGUAGE=update-alternatives --config python</span><br><span class="line">LC_CTYPE=zh_CN.UTF-8</span><br><span class="line">LC_NUMERIC=<span class="string">"en_US.UTF-8"</span></span><br><span class="line">LC_TIME=<span class="string">"en_US.UTF-8"</span></span><br><span class="line">LC_COLLATE=<span class="string">"en_US.UTF-8"</span></span><br><span class="line">LC_MONETARY=<span class="string">"en_US.UTF-8"</span></span><br><span class="line">LC_MESSAGES=<span class="string">"en_US.UTF-8"</span></span><br><span class="line">LC_PAPER=<span class="string">"en_US.UTF-8"</span></span><br><span class="line">LC_NAME=<span class="string">"en_US.UTF-8"</span></span><br><span class="line">LC_ADDRESS=<span class="string">"en_US.UTF-8"</span></span><br><span class="line">LC_TELEPHONE=<span class="string">"en_US.UTF-8"</span></span><br><span class="line">LC_MEASUREMENT=<span class="string">"en_US.UTF-8"</span></span><br><span class="line">LC_IDENTIFICATION=<span class="string">"en_US.UTF-8"</span></span><br><span class="line">LC_ALL=</span><br></pre></td></tr></table></figure>
</li>
<li><p>我用的是：locale-gen zh_CN.UTF-8 en_US.UTF-8（好像是这个解决的）</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 自用笔记 </category>
            
            <category> 服务器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Flask </tag>
            
            <tag> Nginx </tag>
            
            <tag> Uwsgi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pycharm的使用技巧]]></title>
      <url>/use%20pycharm/</url>
      <content type="html"><![CDATA[<p>工欲善其事，必先利其器。将pycharm的一些常用技巧记录下来！</p>
<a id="more"></a>
<h2 id="查看调用库的源代码"><a href="#查看调用库的源代码" class="headerlink" title="查看调用库的源代码"></a>查看调用库的源代码</h2><h3 id="查看调用库源码的类、方法、函数、变量"><a href="#查看调用库源码的类、方法、函数、变量" class="headerlink" title="查看调用库源码的类、方法、函数、变量"></a>查看调用库源码的类、方法、函数、变量</h3><p>调用库时，你可以在你好奇的几乎任何地方点击 Command+B，就可以很方便的跳转到源码里的类，方法，函数，变量的定义。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ Command+B</span><br></pre></td></tr></table></figure>
<h2 id="一键上传代码至github"><a href="#一键上传代码至github" class="headerlink" title="一键上传代码至github"></a>一键上传代码至github</h2><h3 id="配置pycharm"><a href="#配置pycharm" class="headerlink" title="配置pycharm"></a>配置pycharm</h3><p>Pycharm =&gt; Preferences =&gt; Version Contorl =&gt; github<br>过程如图所示：<br><img src="http://ongsui5u0.bkt.clouddn.com/WechatIMG159.jpeg" alt=""><br><img src="http://ongsui5u0.bkt.clouddn.com/WechatIMG162.jpeg" alt="">  </p>
<h3 id="验证git"><a href="#验证git" class="headerlink" title="验证git"></a>验证git</h3><p>验证过程如图所示<br><img src="http://ongsui5u0.bkt.clouddn.com/WechatIMG163.jpeg" alt=""></p>
<h3 id="上传至github"><a href="#上传至github" class="headerlink" title="上传至github"></a>上传至github</h3><p>过程如下：<br><img src="http://ongsui5u0.bkt.clouddn.com/WechatIMG165.jpeg" alt=""><br><img src="http://ongsui5u0.bkt.clouddn.com/WechatIMG164.jpeg" alt=""></p>
<h3 id="添加author-‘HuaHua’作者信息"><a href="#添加author-‘HuaHua’作者信息" class="headerlink" title="添加author = ‘HuaHua’作者信息"></a>添加<strong>author</strong> = ‘HuaHua’作者信息</h3><p>如下图所示在设置中添加：  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ __author__ = <span class="string">'$USER'</span></span><br></pre></td></tr></table></figure>
<p><img src="http://ongsui5u0.bkt.clouddn.com/WechatIMG160.jpeg" alt="">  </p>
]]></content>
      
        
        <tags>
            
            <tag> pycharm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MongoDB的基本使用]]></title>
      <url>/mongodb%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>记录下mongodb的基本使用方法，积累记录！</p>
<a id="more"></a>
<h2 id="mongodb的基本使用方法"><a href="#mongodb的基本使用方法" class="headerlink" title="mongodb的基本使用方法"></a>mongodb的基本使用方法</h2><h3 id="启动数据库"><a href="#启动数据库" class="headerlink" title="启动数据库"></a>启动数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service mongod start</span><br></pre></td></tr></table></figure>
<h3 id="输入mongo进入shell命令行"><a href="#输入mongo进入shell命令行" class="headerlink" title="输入mongo进入shell命令行"></a>输入mongo进入shell命令行</h3><h3 id="展示数据库"><a href="#展示数据库" class="headerlink" title="展示数据库"></a>展示数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ show dbs</span><br></pre></td></tr></table></figure>
<h3 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ use ****</span><br></pre></td></tr></table></figure>
<h3 id="查看该数据库下的集合"><a href="#查看该数据库下的集合" class="headerlink" title="查看该数据库下的集合"></a>查看该数据库下的集合</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ show collections</span><br></pre></td></tr></table></figure>
<h3 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.createCollection(<span class="string">"***"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.collection.insert(&#123;<span class="string">"1"</span>: <span class="string">"2"</span>&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>注：如果没有该集合会自动创建集合</li>
</ul>
<h2 id="删-除"><a href="#删-除" class="headerlink" title="删 除"></a>删 除</h2><h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.collection.remove(&#123;文档内容&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ 切换到该数据库下，输入db.dropDatabase()</span><br></pre></td></tr></table></figure>
<h3 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.collection.drop()</span><br></pre></td></tr></table></figure>
<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><h3 id="查询集合"><a href="#查询集合" class="headerlink" title="查询集合"></a>查询集合</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.collection.find()</span><br></pre></td></tr></table></figure>
<h3 id="查询前N项数据"><a href="#查询前N项数据" class="headerlink" title="查询前N项数据"></a>查询前N项数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.collection.find().<span class="built_in">limit</span>(n)</span><br></pre></td></tr></table></figure>
<h3 id="从第n项开始查询"><a href="#从第n项开始查询" class="headerlink" title="从第n项开始查询"></a>从第n项开始查询</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.collection.find().skip(N)</span><br></pre></td></tr></table></figure>
<h3 id="统计集合中数据数量"><a href="#统计集合中数据数量" class="headerlink" title="统计集合中数据数量"></a>统计集合中数据数量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.collection.count()</span><br></pre></td></tr></table></figure>
<h3 id="导入数据，数据格式为data-json"><a href="#导入数据，数据格式为data-json" class="headerlink" title="导入数据，数据格式为data.json"></a>导入数据，数据格式为data.json</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mongoimport --db geo --collection geo --drop --file /lizw/beijing.json</span><br></pre></td></tr></table></figure>
<ul>
<li>注：原集合存在会删除原有集合</li>
</ul>
<h3 id="导入数据，数据格式为csv"><a href="#导入数据，数据格式为csv" class="headerlink" title="导入数据，数据格式为csv"></a>导入数据，数据格式为csv</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mongoimport --db d --collection c --<span class="built_in">type</span> csv --headerline --file /Users/li/mcld/shuju.csv</span><br></pre></td></tr></table></figure>
<ul>
<li>–db 数据库名称  </li>
<li>–collection 集合名称  </li>
<li>–headerline：这个参数很重要，加上这个参数后创建完成后的内容会以 CSV 第一行的内容为字段名  </li>
<li>–file Users/li/mcld/shuju.csv：这里就是 csv 文件的路径了。</li>
</ul>
<h3 id="导出数据"><a href="#导出数据" class="headerlink" title="导出数据"></a>导出数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mongoexport -d lianjia -c zufang_location -o /Users/lzw/li.josn</span><br></pre></td></tr></table></figure>
<ul>
<li>mongoexport -d db -c collection -o /Users/lzw/li.josn(文件位置及文件名称)   </li>
</ul>
]]></content>
      
        <categories>
            
            <category> 自用笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu 安装MongoDB]]></title>
      <url>/ubuntu%20%E5%AE%89%E8%A3%85MongoDB/</url>
      <content type="html"><![CDATA[<p>ubuntu (16.04)下使用mongodb</p>
<a id="more"></a>
<h2 id="ubuntu-安装MongoDB"><a href="#ubuntu-安装MongoDB" class="headerlink" title="ubuntu 安装MongoDB"></a>ubuntu 安装MongoDB</h2><h3 id="安装mongodb"><a href="#安装mongodb" class="headerlink" title="安装mongodb"></a>安装mongodb</h3><p>可以根据官网提供的方法进行安装<br><a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/#install-mongodb-community-edition" target="_blank" rel="noopener">官网入口</a></p>
<h3 id="导入MongoDB-public-GPG-Key"><a href="#导入MongoDB-public-GPG-Key" class="headerlink" title="导入MongoDB public GPG Key"></a>导入MongoDB public GPG Key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6</span><br></pre></td></tr></table></figure>
<h3 id="为mongodb创建一个列表文件"><a href="#为mongodb创建一个列表文件" class="headerlink" title="为mongodb创建一个列表文件"></a>为mongodb创建一个列表文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"deb [ arch=amd64,arm64 ] http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.4 multiverse"</span> | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list</span><br></pre></td></tr></table></figure>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure>
<h3 id="安装mongodb-1"><a href="#安装mongodb-1" class="headerlink" title="安装mongodb"></a>安装mongodb</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install -y mongodb-org</span><br></pre></td></tr></table></figure>
<ul>
<li>注：mongodb的配置文件所在目录为/etc/mongodb.conf</li>
</ul>
<h3 id="启动mongodb"><a href="#启动mongodb" class="headerlink" title="启动mongodb"></a>启动mongodb</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service mongod start</span><br></pre></td></tr></table></figure>
<h3 id="查看mongodb的守护进程"><a href="#查看mongodb的守护进程" class="headerlink" title="查看mongodb的守护进程"></a>查看mongodb的守护进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ps aux | grep mongodt</span><br></pre></td></tr></table></figure>
<h3 id="关闭mongodb"><a href="#关闭mongodb" class="headerlink" title="关闭mongodb"></a>关闭mongodb</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service mongod stop</span><br></pre></td></tr></table></figure>
<h2 id="卸载mongodb"><a href="#卸载mongodb" class="headerlink" title="卸载mongodb"></a>卸载mongodb</h2><h3 id="关闭mongodb-1"><a href="#关闭mongodb-1" class="headerlink" title="关闭mongodb"></a>关闭mongodb</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service mongod stop</span><br></pre></td></tr></table></figure>
<h3 id="卸载所有安装包"><a href="#卸载所有安装包" class="headerlink" title="卸载所有安装包"></a>卸载所有安装包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get purge mongodb-org*</span><br></pre></td></tr></table></figure>
<h3 id="移除数据库和日志文件（具体看-etc-mongodb-conf配置文件）"><a href="#移除数据库和日志文件（具体看-etc-mongodb-conf配置文件）" class="headerlink" title="移除数据库和日志文件（具体看/etc/mongodb.conf配置文件）"></a>移除数据库和日志文件（具体看/etc/mongodb.conf配置文件）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm -r /var/<span class="built_in">log</span>/mongodb</span><br><span class="line">$ sudo rm -r /var/lib/mongodb</span><br></pre></td></tr></table></figure>
<h3 id="etc-mongodb-conf配置文件如下（部分数据）："><a href="#etc-mongodb-conf配置文件如下（部分数据）：" class="headerlink" title="./etc/mongodb.conf配置文件如下（部分数据）："></a>./etc/mongodb.conf配置文件如下（部分数据）：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mongodb.conf</span></span><br><span class="line">sudo apt-get purge mongodb-org*</span><br><span class="line"></span><br><span class="line"><span class="comment"># Where to store the data.</span></span><br><span class="line">dbpath=/var/lib/mongodb   //数据库路径</span><br><span class="line"></span><br><span class="line"><span class="comment">#where to log</span></span><br><span class="line">logpath=/var/<span class="built_in">log</span>/mongodb/mongodb.log  日志路径</span><br><span class="line"></span><br><span class="line">logappend=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">bind_ip = 127.0.0.1</span><br><span class="line"><span class="comment">#port = 27017</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable journaling, http://www.mongodb.org/display/DOCS/Journaling</span></span><br><span class="line">journal=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enables periodic logging of CPU utilization and I/O wait</span></span><br><span class="line"><span class="comment">#cpu = true</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 自用笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MongoDB </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mac自带邮件不能登录163邮箱]]></title>
      <url>/%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>想用mac自带的邮件软件来登录163邮箱，每次登录都提示密码错误，记录一下解决办法</p>
<a id="more"></a>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="登录网页版的163邮箱"><a href="#登录网页版的163邮箱" class="headerlink" title="登录网页版的163邮箱"></a>登录网页版的163邮箱</h3><p>在设置里面找到客户端授权密码，将其设置成开启状态，这时候系统会让你设置一个授权密码！！！<br><img src="http://oz4pkhxf8.bkt.clouddn.com/WechatIMG136.jpeg" alt=""></p>
<h3 id="打开你的邮件"><a href="#打开你的邮件" class="headerlink" title="打开你的邮件"></a>打开你的邮件</h3><p>在系统偏好设置里添加163邮箱，输入账号登录，注意！！！密码要填写你之前设置的授权码！！！这样你就可以用mac自带的邮件登录你的163邮箱了。</p>
]]></content>
      
        <categories>
            
            <category> 自用笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux 基本命令]]></title>
      <url>/Linux%E6%9C%80%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>记录下自己总也忘记的一些最基本的命令</p>
<a id="more"></a>
<h2 id="Linux最基本的命令"><a href="#Linux最基本的命令" class="headerlink" title="Linux最基本的命令"></a>Linux最基本的命令</h2><h3 id="scp（复制粘贴"><a href="#scp（复制粘贴" class="headerlink" title="scp（复制粘贴)"></a>scp（复制粘贴)</h3><p>从服务器复制文件到本机(在本地终端运行)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp -r ***@***:/123123 /Users/li/e</span><br></pre></td></tr></table></figure></p>
<p>@是你的服务器地址，123123是你要复制的文件夹，/Users/li/ 是你要复制到本地的路径<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ 切记，复制文件夹要加-r</span><br></pre></td></tr></table></figure></p>
<h3 id="从本地复制文件到服务器-在本地终端运行-有一点需要注意的是你是否拥有root权限"><a href="#从本地复制文件到服务器-在本地终端运行-有一点需要注意的是你是否拥有root权限" class="headerlink" title="从本地复制文件到服务器(在本地终端运行),有一点需要注意的是你是否拥有root权限"></a>从本地复制文件到服务器(在本地终端运行),有一点需要注意的是你是否拥有root权限</h3><p>root权限(复制本地123文件夹到服务器的try文件夹下)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp -r /Users/li/123 root@*****:/try</span><br></pre></td></tr></table></figure>
<p>非root权限(复制本地123文件夹到服务器)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp -r /Users/li/123 root@*****:/</span><br></pre></td></tr></table></figure></p>
<p>上面例子的try就不能写了，没有权限只能写到根目录下</p>
<h3 id="mv-更名、移动文件"><a href="#mv-更名、移动文件" class="headerlink" title="mv 更名、移动文件"></a>mv 更名、移动文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mv A B</span><br></pre></td></tr></table></figure>
<p>此路径下无B文件夹，A将更名为B</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mv A /B/c/</span><br></pre></td></tr></table></figure>
<p>A将移动到c路径下</p>
<h3 id="kill-杀死进程"><a href="#kill-杀死进程" class="headerlink" title="kill 杀死进程"></a>kill 杀死进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">kill</span> -9 进程id</span><br></pre></td></tr></table></figure>
<h3 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ps aux | grep uwsgi</span><br></pre></td></tr></table></figure>
<p>查看uwsgi的进程</p>
<h3 id="列出目前所有的正在内存中的程序"><a href="#列出目前所有的正在内存中的程序" class="headerlink" title="列出目前所有的正在内存中的程序"></a>列出目前所有的正在内存中的程序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ps aux</span><br></pre></td></tr></table></figure>
<h3 id="编辑文件内容的小操作"><a href="#编辑文件内容的小操作" class="headerlink" title="编辑文件内容的小操作"></a>编辑文件内容的小操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ G：直接跳转到文件的底部</span><br><span class="line">$ gg: 跳转到文件首</span><br><span class="line">$ 0: 跳转到行首。</span><br><span class="line">$ $: 跳转到行尾。</span><br><span class="line">$ <span class="comment">#：跳转到该行的第#个位置。</span></span><br><span class="line">$ :<span class="comment">#：跳转到#行。</span></span><br><span class="line">$ /： 输入关键字，发现不是要找的，直接在按n，向后查找直到找到为止。</span><br><span class="line">$ ?： 输入关键字，发现不是要找的，直接在按n，向前查找直到找到为止。</span><br></pre></td></tr></table></figure>
<h3 id="列出当前用户组"><a href="#列出当前用户组" class="headerlink" title="列出当前用户组"></a>列出当前用户组</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ll</span><br></pre></td></tr></table></figure>
<h3 id="找出当前目录下-2-天内新创建的所有-json-文件"><a href="#找出当前目录下-2-天内新创建的所有-json-文件" class="headerlink" title="找出当前目录下 2 天内新创建的所有 json 文件"></a>找出当前目录下 2 天内新创建的所有 json 文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  find ./ -<span class="built_in">type</span> f –name ‘*.json’-ctime -2</span><br></pre></td></tr></table></figure>
<h3 id="查看系统某个端口是否已经被其他程序占用"><a href="#查看系统某个端口是否已经被其他程序占用" class="headerlink" title="查看系统某个端口是否已经被其他程序占用"></a>查看系统某个端口是否已经被其他程序占用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lsof –i:端口号  或者   netstat –anp | grep 端口号</span><br></pre></td></tr></table></figure>
<h2 id="Linux-查看文件夹和文件大小"><a href="#Linux-查看文件夹和文件大小" class="headerlink" title="Linux 查看文件夹和文件大小"></a>Linux 查看文件夹和文件大小</h2><h3 id="查看目前所有文件系统的可用空间以及使用状况"><a href="#查看目前所有文件系统的可用空间以及使用状况" class="headerlink" title="查看目前所有文件系统的可用空间以及使用状况"></a>查看目前所有文件系统的可用空间以及使用状况</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ df -h</span><br></pre></td></tr></table></figure>
<h3 id="查看文件和文件夹的使用情况"><a href="#查看文件和文件夹的使用情况" class="headerlink" title="查看文件和文件夹的使用情况"></a>查看文件和文件夹的使用情况</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ du -h --max-depth=1 your_dest_dir</span><br></pre></td></tr></table></figure>
<ul>
<li>your_dest_dir是文件名或者文件路径</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 自用笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在windows下用ls]]></title>
      <url>/%E5%9C%A8windows%E4%B8%8B%E7%94%A8ls/</url>
      <content type="html"><![CDATA[<p>用惯了linux下的ls，windows下没有ls，列出目录列表是dir，把dir改成ls</p>
<a id="more"></a>
<h2 id="在windows下用ls"><a href="#在windows下用ls" class="headerlink" title="在windows下用ls"></a>在windows下用ls</h2><h3 id="一步操作就可以搞定"><a href="#一步操作就可以搞定" class="headerlink" title="一步操作就可以搞定"></a>一步操作就可以搞定</h3><p>在C:\Windows 新建一个ls.bat文件夹，输入如下内容</p>
<pre><code class="bash">@<span class="built_in">echo</span> off  
dir
</code></pre>
]]></content>
      
        <categories>
            
            <category> 自用笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> windows </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mac 安装MongoDB]]></title>
      <url>/mac%E5%AE%89%E8%A3%85mongodb/</url>
      <content type="html"><![CDATA[<p>使用HomeBrew安装</p>
<a id="more"></a>
<h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><h3 id="更新HomeBrew"><a href="#更新HomeBrew" class="headerlink" title="更新HomeBrew"></a>更新HomeBrew</h3><pre><code class="bash">$ brew update
</code></pre>
<h3 id="安装MongoDB"><a href="#安装MongoDB" class="headerlink" title="安装MongoDB"></a>安装MongoDB</h3><pre><code class="bash">$ brew install mongodb
</code></pre>
<h3 id="可以看见类似如下信息，信息中可以找到启动命令和配置文件路径"><a href="#可以看见类似如下信息，信息中可以找到启动命令和配置文件路径" class="headerlink" title="可以看见类似如下信息，信息中可以找到启动命令和配置文件路径"></a>可以看见类似如下信息，信息中可以找到启动命令和配置文件路径</h3><p><img src="http://ongsui5u0.bkt.clouddn.com/WechatIMG125.jpeg" alt=""></p>
<h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><pre><code class="bash">$ brew list
</code></pre>
<h3 id="启动mongodb"><a href="#启动mongodb" class="headerlink" title="启动mongodb"></a>启动mongodb</h3><pre><code class="bash">$ brew services start mongodb
</code></pre>
<h3 id="链接mongodb"><a href="#链接mongodb" class="headerlink" title="链接mongodb"></a>链接mongodb</h3><pre><code class="bash">$ mongo
</code></pre>
<h3 id="卸载mongodb"><a href="#卸载mongodb" class="headerlink" title="卸载mongodb"></a>卸载mongodb</h3><pre><code class="bash">$ brew uninstall mongodb
$ brew list (已经不存在 mongodb)
</code></pre>
]]></content>
      
        <categories>
            
            <category> 自用笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mac </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[bitbucket]]></title>
      <url>/bitbucket/</url>
      <content type="html"><![CDATA[<p>用bitbucket代替github、gitlab当做代码的仓库</p>
<a id="more"></a>
<h2 id="注册bitbucket"><a href="#注册bitbucket" class="headerlink" title="注册bitbucket"></a>注册bitbucket</h2><h3 id="注册bitbucket-1"><a href="#注册bitbucket-1" class="headerlink" title="注册bitbucket"></a>注册<a href="https://bitbucket.org" target="_blank" rel="noopener">bitbucket</a></h3><ul>
<li>按照官网的地址自己注册就行了</li>
</ul>
<h3 id="使用bitbucket"><a href="#使用bitbucket" class="headerlink" title="使用bitbucket"></a>使用bitbucket</h3><ul>
<li>bitbucket默认是英文，对自己的英文没自信可以在设置里改成中文<br><img src="http://ongsui5u0.bkt.clouddn.com/WechatIMG75.jpeg" alt=""></li>
</ul>
<h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p><img src="http://ongsui5u0.bkt.clouddn.com/WechatIMG62.jpeg" alt=""></p>
<h3 id="导入SSH"><a href="#导入SSH" class="headerlink" title="导入SSH"></a>导入SSH</h3><ul>
<li>和你用github的操作是一样的<br><img src="http://ongsui5u0.bkt.clouddn.com/WechatIMG51.jpeg" alt=""></li>
</ul>
<h3 id="设置用户和组的访问"><a href="#设置用户和组的访问" class="headerlink" title="设置用户和组的访问"></a>设置用户和组的访问</h3><p><img src="http://ongsui5u0.bkt.clouddn.com/WechatIMG50.jpeg" alt=""><br><img src="http://ongsui5u0.bkt.clouddn.com/WechatIMG56.jpeg" alt=""></p>
<h3 id="设置默认审核者"><a href="#设置默认审核者" class="headerlink" title="设置默认审核者"></a>设置默认审核者</h3><ul>
<li>负责审核与合并组员提交的代码<br><img src="http://ongsui5u0.bkt.clouddn.com/WechatIMG57.jpeg" alt=""></li>
</ul>
<h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><ul>
<li>使用过github的人都知道master分支，而给每一个人都创建一分支，可以方便管理。<br><img src="http://ongsui5u0.bkt.clouddn.com/WechatIMG59.jpeg" alt=""><br><img src="http://ongsui5u0.bkt.clouddn.com/WechatIMG52.jpeg" alt=""></li>
</ul>
<h3 id="设置分支权限"><a href="#设置分支权限" class="headerlink" title="设置分支权限"></a>设置分支权限</h3><p><img src="http://ongsui5u0.bkt.clouddn.com/WechatIMG58.jpeg" alt=""></p>
<h3 id="到这里bitbucket基本上就设置完了"><a href="#到这里bitbucket基本上就设置完了" class="headerlink" title="到这里bitbucket基本上就设置完了"></a>到这里bitbucket基本上就设置完了</h3><h3 id="提交代码到master分支"><a href="#提交代码到master分支" class="headerlink" title="提交代码到master分支"></a>提交代码到master分支</h3><ul>
<li>这里随便提交，当做测试,新建文件夹try  </li>
<li><em>*</em>代表你仓库的地址  </li>
</ul>
<pre><code class="bash">$ mkdir try
$ <span class="built_in">cd</span> try
$ git <span class="built_in">clone</span> ****
</code></pre>
<ul>
<li>clone 你仓库里面的代码  </li>
<li>进入到你clone的项目的目录随便的更改一下内容,然后提交 </li>
</ul>
<pre><code class="bash">$ vim try.text
$ git init 
$ git remote add origin ****
$ git add try.text
$ git commit -m <span class="string">"add try.text"</span>
$ git push
</code></pre>
<p><img src="http://ongsui5u0.bkt.clouddn.com/WechatIMG76.jpeg" alt="">  </p>
<ul>
<li><p>现在去你仓库中看源码是不是加入了try.text<br><img src="http://ongsui5u0.bkt.clouddn.com/WechatIMG63.jpeg" alt="">  </p>
</li>
<li><p>这中间出现了一点问题，出现了如下的错误信息</p>
</li>
</ul>
<pre><code class="bash">git error: failed to push some refs to
</code></pre>
<ul>
<li>解决办法，执行：</li>
</ul>
<pre><code class="bash">git pull --rebase origin master
</code></pre>
<ul>
<li>这就把你本地的代码提交了master分支上，但是如果你有自己的分支怎么办呢，新建一个例子，执行下面代码</li>
</ul>
<pre><code class="bash">$ mkdir try1
$ <span class="built_in">cd</span> try1
$ git init
$ git remote add origin *****
$ git fetch &amp;&amp; git checkout ****
$ vim try1.text
$ git add try1.text
$ git commit -m <span class="string">"add try1.text"</span>
$ git push
</code></pre>
<ul>
<li>下图为整个过程<br><img src="http://ongsui5u0.bkt.clouddn.com/WechatIMG80.jpeg" alt=""></li>
<li>checkout* 你自己的分支。</li>
<li>git fetch &amp;&amp; git checkout <em>**</em>的位置如下图所示<br><img src="http://ongsui5u0.bkt.clouddn.com/WechatIMG54.jpeg" alt=""><br><img src="http://ongsui5u0.bkt.clouddn.com/WechatIMG60.jpeg" alt=""></li>
<li>现在在你自己的分支下就可以看见你刚刚提交的try1.text文件了</li>
</ul>
<h2 id="组员使用bitbucket"><a href="#组员使用bitbucket" class="headerlink" title="组员使用bitbucket"></a>组员使用bitbucket</h2><h3 id="注册登录bitbucket"><a href="#注册登录bitbucket" class="headerlink" title="注册登录bitbucket"></a>注册登录bitbucket</h3><ul>
<li>在个人页面的右侧你可以看见你有的仓库，找到自己需要工作的仓库即可<br><img src="http://ongsui5u0.bkt.clouddn.com/WechatIMG74.jpeg" alt=""></li>
<li>组员提交代码至自己的分支。举例说明！</li>
</ul>
<pre><code class="bash">$ mkdir t_try
$ <span class="built_in">cd</span> t_try
$ git init 
$ git remote add origin https://****
$ git fetch &amp;&amp; checkout ****
$ vim t_try.text
$ git add t_try.text
$ git commit -m <span class="string">"add t_try.text"</span>
$ git push
</code></pre>
<ul>
<li>这样就把你的代码提交到了组长指定给你的分支上了。下图为整个过程<br><img src="http://ongsui5u0.bkt.clouddn.com/WechatIMG79.jpeg" alt=""></li>
<li>在你自己的分支上你可以看见刚刚提交的t_try.text文件<br><img src="http://ongsui5u0.bkt.clouddn.com/WechatIMG65.jpeg" alt=""></li>
<li>这里用的https方式，公司的电脑用git怎么都连不上，明天请教一下。</li>
<li>到这里还没有彻底的结束，你提交的代码只是提交到了你自己的分支上，整个工作完成或部分功能上线时候，你需要将你提交的代码提交申请合并，由组长审核并合并。</li>
<li>在你的页面找到拉取请求，点击创建拉取请求<br><img src="http://ongsui5u0.bkt.clouddn.com/WechatIMG67.jpeg" alt="">  </li>
<li>填好title和描述提交即可<br><img src="http://ongsui5u0.bkt.clouddn.com/WechatIMG77.jpeg" alt=""></li>
</ul>
<h2 id="组长审核代码并合并"><a href="#组长审核代码并合并" class="headerlink" title="组长审核代码并合并"></a>组长审核代码并合并</h2><ul>
<li>在主页面找到拉取请求即可看见待合并的请求<br><img src="![](http://ongsui5u0.bkt.clouddn.com/WechatIMG72.jpeg" alt=""><br><img src="![](http://ongsui5u0.bkt.clouddn.com/WechatIMG70.jpeg" alt=""> </li>
<li>点击合并，在master分支就可以看见组员提交的t_try.text文件<br><img src="http://ongsui5u0.bkt.clouddn.com/WechatIMG71.jpeg" alt=""></li>
</ul>
<h2 id="以上只是简单的操作，后续功能有待完善。。。"><a href="#以上只是简单的操作，后续功能有待完善。。。" class="headerlink" title="以上只是简单的操作，后续功能有待完善。。。"></a>以上只是简单的操作，后续功能有待完善。。。</h2>]]></content>
      
        <categories>
            
            <category> 原创 </category>
            
            <category> 自用笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> bitbucket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[走在全栈的路上]]></title>
      <url>/visit/</url>
      <content type="html"><![CDATA[<p>首先成为一名合格的全站工程师，然后再做一位有影响力的程序员！</p>
<p>师傅说他是“一个用了5年时间才刚刚入门的全栈工程师” ，我的小目标就是追上他、超过他、干掉他！有目标，才有前进的动力</p>
<a id="more"></a>
<h2 id="梦想能到达的地方，总有一天脚步也能到达！"><a href="#梦想能到达的地方，总有一天脚步也能到达！" class="headerlink" title="梦想能到达的地方，总有一天脚步也能到达！"></a>梦想能到达的地方，总有一天脚步也能到达！</h2><p>1992年的四月家里多了一个我。<br>2011年，生病休学。<br>2013年，顺利考入哈理工、软件工程系。<br>2013-2016年5月，逃课、打游戏、当服务员、当家教，好像就没学习。<br>2016年5月意识到自己面临的难题，恶补专业知识。<br>2016年9月，首进京，进联想作运行实习生，做了一段时间，发现自己还是喜欢开发，于是自学开发。<br>2016年11月中旬，进入vinci做python实习生，遇见了我师傅。当时是面试前端，被师傅所吸引，进公司做了python实习生。<br>2017年5月-7月，转正失败，回学校，在师傅的帮助下跌跌撞撞，顺利毕业。<br>2017年8月二进京。</p>
<h2 id="全栈的路上一去不复返！！！"><a href="#全栈的路上一去不复返！！！" class="headerlink" title="全栈的路上一去不复返！！！"></a>全栈的路上一去不复返！！！</h2><h3 id="最应该感谢我师傅，他对我在这个行业的抉择影响很大，他把我带进了这个行业，并且让我从另一个角度认识了这个行业。我离开他的时候说过，自己要向他一样成为一位全栈工程师。其实还是蛮想在他手下和他一起做事的，他的思维很特别。在他的博客中看见，30岁，他还想创业，期待可以与他共伍。"><a href="#最应该感谢我师傅，他对我在这个行业的抉择影响很大，他把我带进了这个行业，并且让我从另一个角度认识了这个行业。我离开他的时候说过，自己要向他一样成为一位全栈工程师。其实还是蛮想在他手下和他一起做事的，他的思维很特别。在他的博客中看见，30岁，他还想创业，期待可以与他共伍。" class="headerlink" title="最应该感谢我师傅，他对我在这个行业的抉择影响很大，他把我带进了这个行业，并且让我从另一个角度认识了这个行业。我离开他的时候说过，自己要向他一样成为一位全栈工程师。其实还是蛮想在他手下和他一起做事的，他的思维很特别。在他的博客中看见，30岁，他还想创业，期待可以与他共伍。"></a>最应该感谢我师傅，他对我在这个行业的抉择影响很大，他把我带进了这个行业，并且让我从另一个角度认识了这个行业。我离开他的时候说过，自己要向他一样成为一位全栈工程师。其实还是蛮想在他手下和他一起做事的，他的思维很特别。在他的博客中看见，30岁，他还想创业，期待可以与他共伍。</h3>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo + github 搭建个人博客！]]></title>
      <url>/building_blog/</url>
      <content type="html"><![CDATA[<p>一直以来就想弄个个人博客，今天终于把个人博客实现了。本博基于yelle，稍加改动，后期自己的能力提高了还会加入一些自己的想法。下面我们就来一步一步搭建属于自己的博客吧，let’s go!!!(此次为 Mac下搭建)</p>
<a id="more"></a>
<h3 id="Yelee-——-简而不减-Hexo-双栏博客主题"><a href="#Yelee-——-简而不减-Hexo-双栏博客主题" class="headerlink" title="Yelee —— 简而不减 Hexo 双栏博客主题"></a>Yelee —— 简而不减 Hexo 双栏博客主题</h3><ul>
<li>本主题基于主题 Hexo-Theme-Yilia 修改而来，在此再次感谢原作者 Litten。修复了一些 bugs，改变了大量的样式，添加了不少特性。对原主题百般折腾后，发觉变动越来越大，索性就发布个新主题了，主题随我微博名 “夜Yelee” 。个人喜欢简洁的样式，重视内容的浏览，同时希望作为个人网站的博客，能稍微凸显出博主个性。各种修改折腾大抵基于以上考虑。</li>
</ul>
<h3 id="GitHub链接"><a href="#GitHub链接" class="headerlink" title="GitHub链接"></a>GitHub链接</h3><ul>
<li>GitHub: <a href="https://github.com/MOxFIVE/hexo-theme-yelee" target="_blank" rel="noopener">https://github.com/MOxFIVE/hexo-theme-yelee</a></li>
</ul>
<h3 id="Yelee主题使用说明"><a href="#Yelee主题使用说明" class="headerlink" title="Yelee主题使用说明"></a>Yelee主题使用说明</h3><ul>
<li>Yelee主题使用说明: <a href="http://moxfive.coding.me/yelee/" target="_blank" rel="noopener">http://moxfive.coding.me/yelee/</a></li>
</ul>
<h2 id="LFiveSix’s-blog"><a href="#LFiveSix’s-blog" class="headerlink" title="LFiveSix’s blog"></a>LFiveSix’s blog</h2><ul>
<li>按照上面的Yelee主题使用说明配置,自己稍加修改。</li>
</ul>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="首先需要下载两个东西"><a href="#首先需要下载两个东西" class="headerlink" title="首先需要下载两个东西"></a>首先需要下载两个东西</h3><ul>
<li>node.js</li>
<li>git</li>
<li>下载、安装就自己查看官网执行吧  </li>
<li>都安装好了，打开mac的终端，依次输入node -v、npm -v、git –version如果出现下图版本号，证明你以安装成功。<br><img src="http://ongsui5u0.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-27%20%E4%B8%8B%E5%8D%886.37.50.png" alt=""></li>
</ul>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><ul>
<li>新建一个名为hexo的文件夹，在终端cd到hexo下，执行  </li>
<li>$ npm install hexo  </li>
<li>$ hexo init blog  </li>
<li>$ cd blog  </li>
<li>$ npm install  </li>
<li>此时执行  </li>
<li>$ hexo g (或者hexo generate)  </li>
<li>$ hexo s (或者hexo server)  </li>
<li>现在我们打开<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 已经可以看到一篇内置的blog了。  </li>
<li><img src="http://ongsui5u0.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-27%20%E4%B8%8B%E5%8D%887.41.16.png" alt="">  </li>
<li>输入hexo -v查看本地环境<br><img src="http://ongsui5u0.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-27%20%E4%B8%8B%E5%8D%887.42.53.png" alt=""></li>
</ul>
<h2 id="hexo主题设置"><a href="#hexo主题设置" class="headerlink" title="hexo主题设置"></a>hexo主题设置</h2><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><ul>
<li><a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo主题</a>在这里选择你喜欢的主题，我的是yelee</li>
</ul>
<h3 id="安装yelee"><a href="#安装yelee" class="headerlink" title="安装yelee"></a>安装yelee</h3><ul>
<li>$ hexo clean  </li>
<li>$ git clone <a href="https://github.com/MOxFIVE/hexo-theme-yelee.git" target="_blank" rel="noopener">https://github.com/MOxFIVE/hexo-theme-yelee.git</a> themes/yelee  </li>
</ul>
<h3 id="应用yelee"><a href="#应用yelee" class="headerlink" title="应用yelee"></a>应用yelee</h3><ul>
<li>修改hexo下_config.yml配置文件中的theme属性，将其改为yelee（或者你选择的主题）<br><img src="http://ongsui5u0.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-28%20%E4%B8%8A%E5%8D%8811.39.53.png" alt="">  </li>
<li>更新主题  </li>
<li>$ cd themes/yelee  </li>
<li>$ git pull  </li>
<li>$ hexo g  </li>
<li>$ hexo s  </li>
<li>现在打开<a href="http://localhost:4000/，我们会看到你应用的主题了。" target="_blank" rel="noopener">http://localhost:4000/，我们会看到你应用的主题了。</a></li>
</ul>
<h2 id="配置GitHub"><a href="#配置GitHub" class="headerlink" title="配置GitHub"></a>配置GitHub</h2><h3 id="注册GitHub"><a href="#注册GitHub" class="headerlink" title="注册GitHub"></a>注册GitHub</h3><ul>
<li>先到<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>官网去Sign up 一个账号<br><img src="http://ongsui5u0.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-27%20%E4%B8%8B%E5%8D%886.51.51.png" alt="github">按照提示一步一步继续。</li>
</ul>
<h3 id="ssh授权、生成SSH-key"><a href="#ssh授权、生成SSH-key" class="headerlink" title="ssh授权、生成SSH key"></a>ssh授权、生成SSH key</h3><ul>
<li>打开终端，输入ssh-keygen -t rsa,然后一路回车。接着输入ls ~/.ssh/查看你的key，你会看到id_rsa和id_rsa.pub两个文件，id_rsa是密钥，id_rsa.pub是公钥，将id_rsa.pub的内容添加到GitHub上，这样本地的id_rsa密钥才能跟GitHub上的id_rsa.pub公钥进行配对，才能够授权成功。  </li>
<li>在Github上添加SSH Key<br>首先登陆你的github，点击右上方的倒三角进入Settings，选择左侧的SSH and GPG keys<br><img src="http://ongsui5u0.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-27%20%E4%B8%8B%E5%8D%887.02.39.png" alt="">  </li>
<li>在选择右上角的New SSH key，把你is_sra.pub中的内容复制到这里，最后点击Add SSH key就OK了。<br>SSH key 添加成功之后，打开终端输入ssh －T git@github.com进行测试，出现以下提示就证明你离成功又近了一步。<br><img src="http://ongsui5u0.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-27%20%E4%B8%8B%E5%8D%887.07.02.png" alt=""></li>
</ul>
<h3 id="Github-Page设置"><a href="#Github-Page设置" class="headerlink" title="Github Page设置"></a>Github Page设置</h3><ul>
<li>每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是username/username.github.io，这是特殊的命名约定。你可以通过<a href="http://username.github.io" target="_blank" rel="noopener">http://username.github.io</a> 来访问你的个人主页。  </li>
<li>创建自己的Github Pages<br><img src="http://ongsui5u0.bkt.clouddn.com/webwxgetmsgimg.jpeg" alt=""><br><img src="http://ongsui5u0.bkt.clouddn.com/webwxgetmsgimg%20%283%29.jpeg" alt="new"><br>将username改成你的用户名。  </li>
<li>部署<br>在你的blog目录下执行以下安装命令<br>$ npm install hexo-deployer-git –save<br>修改blog/_config.yml文件中的deploy项，如下图所示，username改为你的用户名。<br><img src="http://ongsui5u0.bkt.clouddn.com/webwxgetmsgimg%20%282%29.jpeg" alt=""><br>设置完，在blog目录下执行hexo d即可同时部署。  </li>
<li>测试<br>一切准备工作都做好了，我们来测试一下，测试地址：<a href="https://username.girhub.io" target="_blank" rel="noopener">https://username.girhub.io</a>  现在你的个人博客已经可以被其他人访问了。</li>
</ul>
<h2 id="设置属于自己的主题"><a href="#设置属于自己的主题" class="headerlink" title="设置属于自己的主题"></a>设置属于自己的主题</h2><h3 id="个人头像"><a href="#个人头像" class="headerlink" title="个人头像"></a>个人头像</h3><ul>
<li>头像路径：hexo/blog/themes/yelee/source/img</li>
</ul>
<h3 id="添加标签"><a href="#添加标签" class="headerlink" title="添加标签"></a>添加标签</h3><ul>
<li>在blog目录下运行hexo new page tags</li>
<li>在\hexo\source\tags\index.md下加入<br><img src="http://ongsui5u0.bkt.clouddn.com/tags.jpeg" alt="tags"></li>
</ul>
<h3 id="添加分类"><a href="#添加分类" class="headerlink" title="添加分类"></a>添加分类</h3><ul>
<li>在blog目录下运行hexo new page categories  </li>
<li>在\hexo\source\categories\index.md下加入<br><img src="http://ongsui5u0.bkt.clouddn.com/categories.jpeg" alt="categories"></li>
</ul>
<h3 id="添加站点小图标"><a href="#添加站点小图标" class="headerlink" title="添加站点小图标"></a>添加站点小图标</h3><ul>
<li>将图标存储在yelee/source/image/1.jpg  </li>
<li>yelee中_config.yml配置做相应更改，favicon: /img/2.png<br><img src="http://ongsui5u0.bkt.clouddn.com/zhandiantubiao.jpeg" alt="站点图标"><br><a href="http://www.bitbug.net/" target="_blank" rel="noopener">在线制作图标的网址</a></li>
</ul>
<h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><ul>
<li>我用的是多说，不过多说在2017年6月1号就关闭了。就不贴怎么设置了。</li>
</ul>
<h3 id="增加Fork-me-on-Github"><a href="#增加Fork-me-on-Github" class="headerlink" title="增加Fork me on Github"></a>增加Fork me on Github</h3><ul>
<li>在/hexo/blog/themes/yelee/layout/layout.ejs做如下更改<br><img src="http://ongsui5u0.bkt.clouddn.com/fork%20me%20.jpeg" alt="github"><br>把链接地址改为你的github地址就OK了。</li>
</ul>
<h3 id="更改页脚信息"><a href="#更改页脚信息" class="headerlink" title="更改页脚信息"></a>更改页脚信息</h3><ul>
<li>在/Users/Van/hexo/blog/themes/yelee/layout/_partial/footer.ejs做如下修改<br><img src="http://ongsui5u0.bkt.clouddn.com/footers.jpeg" alt="">  </li>
<li>修改后的效果<br><img src="http://ongsui5u0.bkt.clouddn.com/footer.jpeg" alt=""></li>
</ul>
<h3 id="增加博文置顶"><a href="#增加博文置顶" class="headerlink" title="增加博文置顶"></a>增加博文置顶</h3><ul>
<li>在hexo/blog/node_modules/hexo-generator-index/lib/generator.js中做如下修改<br><img src="http://ongsui5u0.bkt.clouddn.com/webwxgetmsgimg%20%284%29.jpeg" alt="top"></li>
</ul>
<h3 id="使用七牛云做为图床"><a href="#使用七牛云做为图床" class="headerlink" title="使用七牛云做为图床"></a>使用七牛云做为图床</h3><ul>
<li>需要你自己注册账号，注册好账号把自己博文内需要的图片上传到七牛就OK了，这时候你会疑问，怎么把图片放到博文内呢，后面会有Markdown语法介绍。</li>
</ul>
<h3 id="个人主页的设置"><a href="#个人主页的设置" class="headerlink" title="个人主页的设置"></a>个人主页的设置</h3><ul>
<li>你的博客当然要显示你的名字了，我们来设置一下<br><img src="http://ongsui5u0.bkt.clouddn.com/webwxgetmsgimg%20%286%29.jpeg" alt=""><br><img src="http://ongsui5u0.bkt.clouddn.com/webwxgetmsgimg%20%285%29.jpeg" alt=""><br><img src="http://ongsui5u0.bkt.clouddn.com/webwxgetmsgimg%20%287%29.jpeg" alt=""></li>
</ul>
<h2 id="此博搭建未完待续…"><a href="#此博搭建未完待续…" class="headerlink" title="此博搭建未完待续…"></a>此博搭建未完待续…</h2><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://www.pchou.info/ssgithubPage/2013-01-03-build-github-blog-page-01.html" target="_blank" rel="noopener">http://www.pchou.info/ssgithubPage/2013-01-03-build-github-blog-page-01.html</a><br><a href="http : //www.netcan666.com/2015/11/22/解决Hexo置顶问题/">http : //www.netcan666.com/2015/11/22/解决Hexo置顶问题/</a><br><a href="http://blog.csdn.net/shenshanlaoyuan/article/details/52774507" target="_blank" rel="noopener">Hexo博客添加Fork me on GitHub</a><br><a href="https://segmentfault.com/a/1190000004947261" target="_blank" rel="noopener">手把手教你使用Hexo + Github Pages搭建个人独立博客 </a></p>
]]></content>
      
        <categories>
            
            <category> 自用笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[修改mac终端命令行前缀的显示内容]]></title>
      <url>/%E4%BF%AE%E6%94%B9mac%E7%BB%88%E7%AB%AF%E5%89%8D%E7%BC%80/</url>
      <content type="html"><![CDATA[<p>搞了第一台属于自己的mac，记录一下折腾的轨迹。<br>mac终端自带的前缀太长了，改的简短一点。</p>
<a id="more"></a>
<h2 id="修改前缀"><a href="#修改前缀" class="headerlink" title="修改前缀"></a>修改前缀</h2><h3 id="etc-bashrc-中的PS1变量的内容就是前缀的内容"><a href="#etc-bashrc-中的PS1变量的内容就是前缀的内容" class="headerlink" title="/etc/bashrc 中的PS1变量的内容就是前缀的内容"></a>/etc/bashrc 中的PS1变量的内容就是前缀的内容</h3><ul>
<li>sudo vim /etc/bashrc </li>
</ul>
<h3 id="原来的内容："><a href="#原来的内容：" class="headerlink" title="原来的内容："></a>原来的内容：</h3><ul>
<li>PS1=’\h:\W \u\$ ‘</li>
</ul>
<h3 id="改成PS1-’-u-‘"><a href="#改成PS1-’-u-‘" class="headerlink" title="改成PS1=’\u\$ ‘"></a>改成PS1=’\u\$ ‘</h3><ul>
<li>wq!保存并退出，重新打开终端，修改成功<h3 id="贴一下给个参数代表的含义"><a href="#贴一下给个参数代表的含义" class="headerlink" title="贴一下给个参数代表的含义"></a>贴一下给个参数代表的含义</h3></li>
<li>\u 显示当前用户的用户名（user name）</li>
<li>\h 显示主机名（host name）  </li>
<li>\W 显示当前工作目录的名字（work directory）  </li>
<li>\w 当前所在的完整路径  </li>
<li>$表示符号$</li>
<li>完全可以根据自己的喜好改前缀</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 自用笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[观影史]]></title>
      <url>/movies/</url>
      <content type="html"><![CDATA[<p>成长是需要记录的，自己为自己记录一下成长的过程吧</p>
<a id="more"></a>
<h2 id="观影史"><a href="#观影史" class="headerlink" title="观影史"></a>观影史</h2><h3 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h3><ul>
<li>男儿本色 （11.23） </li>
<li>大话西游（我女神朱茵）（11.25） </li>
<li>空天猎（11.26）</li>
<li>救火英雄（12.03）</li>
<li>逃出生天（12.06）</li>
<li>拆弹专家（1.10）</li>
<li>解忧杂货铺（1.1）</li>
<li>妖铃铃（1.1）</li>
<li>夏洛特的烦恼（1.13）</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 观影清单 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> movies </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读书清单]]></title>
      <url>/books/</url>
      <content type="html"><![CDATA[<p>最近一段时间特别喜欢看书，无论技术还是非技术的，感到自己的认知是多么的渺小，上学的时候没有多读书真是一大罪过，在这做个读书记录吧，也可以在每过一段时间后回头看看自己有没有成长，成长了多少。</p>
<a id="more"></a>
<h2 id="技术类"><a href="#技术类" class="headerlink" title="技术类"></a>技术类</h2><p>2017</p>
<ul>
<li>python web 开发实战  </li>
<li>python 核心编程（第三版） </li>
<li>代码大全（第二版）</li>
<li>python 数据挖掘（1.10-）</li>
</ul>
<h2 id="非技术类"><a href="#非技术类" class="headerlink" title="非技术类"></a>非技术类</h2><p>2017</p>
<ul>
<li>人性的弱点  </li>
<li>失控  </li>
<li>博弈心理学  </li>
<li>人性的优点  </li>
<li>人类简史  </li>
<li>前世今生（11.28-）</li>
<li>穷爸爸富爸爸全集(11.23-)</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 读书清单 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> books </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Markdown语法]]></title>
      <url>/markdown/</url>
      <content type="html"><![CDATA[<p>记录了Markdown写博客常用的语法以及一些注意事项</p>
<a id="more"></a>
<h2 id="Markdown-语法"><a href="#Markdown-语法" class="headerlink" title="Markdown 语法"></a>Markdown 语法</h2><h3 id="博文的标题、标签、分类以及创建日期"><a href="#博文的标题、标签、分类以及创建日期" class="headerlink" title="博文的标题、标签、分类以及创建日期"></a>博文的标题、标签、分类以及创建日期</h3><ul>
<li>title： 你博客的标题  </li>
<li>date： 你博客创建的日期</li>
<li>tags： 你博文所属的标签，你可以随意定义(多个标签应用换行的方式区分开)</li>
<li>categories： 博文分类，可有可无的，看个人习惯</li>
</ul>
<h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><ul>
<li>三个或者更多的－ ＊ _,必须单独一行，可以有空格</li>
</ul>
<h3 id="文章摘要"><a href="#文章摘要" class="headerlink" title="文章摘要"></a>文章摘要</h3><ul>
<li>写摘要</li>
<li>&lt;！– more –&gt;  </li>
<li>写文章的内容</li>
<li>注意–和more中间有个空格所有符号都英文的</li>
</ul>
<h3 id="标题等级的写法"><a href="#标题等级的写法" class="headerlink" title="标题等级的写法"></a>标题等级的写法</h3><ul>
<li><img src="http://ongsui5u0.bkt.clouddn.com/biaoti.jpeg" alt="">  </li>
<li>注意＃与标题间要有一个空格，一定要有空格。</li>
</ul>
<h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><ul>
<li>在文字开头添加(<em>, +, -)实现无序列表。但是要注意在(</em>, +, -)和文字之间需要添加空格。（建议：一个文档中只是用一种无序列表的表示方式）</li>
</ul>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><ul>
<li>使用数字后面➕句号（要有空格）</li>
</ul>
<h3 id="文字链接"><a href="#文字链接" class="headerlink" title="文字链接"></a>文字链接</h3><ul>
<li><img src="http://ongsui5u0.bkt.clouddn.com/wenlian.jpeg" alt=""></li>
</ul>
<h3 id="图片链接"><a href="#图片链接" class="headerlink" title="图片链接"></a>图片链接</h3><ul>
<li><img src="http://ongsui5u0.bkt.clouddn.com/tulian.jpeg" alt=""></li>
</ul>
<h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><ul>
<li>每行前面加四个空格或者一个tab</li>
</ul>
<h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><ul>
<li>将需要设置为斜体的文字两端使用1个“*”或者“_”夹起来</li>
</ul>
<h3 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h3><ul>
<li>将需要设置为斜体的文字两端使用2个“*”或者“_”夹起来</li>
</ul>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><table>
<thead>
<tr>
<th>name</th>
<th style="text-align:center">age</th>
<th style="text-align:right">school</th>
</tr>
</thead>
<tbody>
<tr>
<td>five</td>
<td style="text-align:center">20</td>
<td style="text-align:right">s</td>
</tr>
<tr>
<td>six</td>
<td style="text-align:center">20</td>
<td style="text-align:right">e</td>
</tr>
</tbody>
</table>
<p><img src="http://ongsui5u0.bkt.clouddn.com/biao.jpeg" alt=""><br><img src="http://ongsui5u0.bkt.clouddn.com/biaoge.jpeg" alt=""></p>
<h3 id="分段"><a href="#分段" class="headerlink" title="分段"></a>分段</h3><ul>
<li>两个回车</li>
</ul>
<h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><ul>
<li>两个空格 ＋ 回车</li>
</ul>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><ul>
<li><img src="http://ongsui5u0.bkt.clouddn.com/yinyong%20.jpeg" alt=""></li>
</ul>
<h3 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h3><ul>
<li>新建<br>$ hexo new “blog”<br>新建的文件在 hexo/source/_posts/blog.md  </li>
<li>编译<br>$ hexo generate<br>一般部署上去的时候都需要编译一下，编译后，会出现一个 public 文件夹，将所有的md文件编译成html文件 </li>
<li>开启本地服务<br>$ hexo server<br>这个命令，开启本地hexo服务用的  </li>
<li>部署<br>$ hexo deploy<br>部署到git上的时候，需要用这个命令  </li>
<li>清除 public<br>$ hexo clean<br>当 source 文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。</li>
</ul>
<h3 id="以上都是常用的一些基本命令，如有其他需求的可以到官网自行查阅"><a href="#以上都是常用的一些基本命令，如有其他需求的可以到官网自行查阅" class="headerlink" title="以上都是常用的一些基本命令，如有其他需求的可以到官网自行查阅"></a>以上都是常用的一些基本命令，如有其他需求的可以到官网自行查阅</h3>]]></content>
      
        <categories>
            
            <category> 自用笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
